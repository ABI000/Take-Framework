{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.53.49325",
      "templateHash": "658106556023177294"
    }
  },
  "parameters": {
    "purpose": {
      "type": "string",
      "allowedValues": [
        "prod",
        "shared",
        "client"
      ],
      "metadata": {
        "description": "purpose"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "prod",
        "dev",
        "qa",
        "stage",
        "test"
      ],
      "metadata": {
        "description": "The Tier of the Sku."
      }
    },
    "projectName": {
      "type": "string",
      "minLength": 4,
      "maxLength": 30,
      "metadata": {
        "description": "The name of the project."
      }
    },
    "subscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]"
    },
    "location": {
      "type": "string"
    },
    "guidstring": {
      "type": "string",
      "defaultValue": "[newGuid()]"
    },
    "rgCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "textTranslationskuName": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0"
      ]
    },
    "textTranslationCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "storageAccountsku": {
      "type": "string",
      "defaultValue": "Standard_ZRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GRS",
        "Standard_GZRS",
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_RAGZRS",
        "Standard_ZRS"
      ]
    },
    "storageAccountCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "azureBlobDefaultContainer": {
      "type": "string",
      "defaultValue": "DefaultContainer"
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The LoginName of the azuresql"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The Password of the azuresql"
      }
    },
    "DbCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "serverCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "dbskuname": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "dbskutier": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "appServicePlanSkuname": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "D1",
        "F1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P1V2",
        "P2V2",
        "P3V2",
        "I1",
        "I2",
        "I3",
        "Y1"
      ],
      "metadata": {
        "description": "The Name of the Sku."
      }
    },
    "appServicePlanSkutier": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": [
        "Shared",
        "Free",
        "Basic",
        "Standard",
        "Dedicated",
        "Premium",
        "PremiumV2",
        "Isolated",
        "Dynamic"
      ],
      "metadata": {
        "description": "The Tier of the Sku."
      }
    },
    "appServicePlanCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "containerRegistryskuname": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "containerRegistryCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "webAppCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "keyVaultCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "emailDataLocation": {
      "type": "string"
    },
    "userEngagementTracking": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ]
    },
    "domainManagement": {
      "type": "string",
      "defaultValue": "AzureManaged",
      "allowedValues": [
        "AzureManaged",
        "CustomerManaged",
        "CustomerManagedInExchangeOnline"
      ]
    },
    "customDomain": {
      "type": "string",
      "defaultValue": "pentenrieder.dev",
      "minLength": 1,
      "maxLength": 253
    },
    "username": {
      "type": "string",
      "defaultValue": "DoNotReply"
    },
    "displayName": {
      "type": "string",
      "defaultValue": "DoNotReply"
    },
    "emailServiceCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "emaildomainCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "communicationServiceCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "jwtSecretKey": {
      "type": "securestring"
    },
    "tgphone": {
      "type": "string"
    },
    "tgappid": {
      "type": "string"
    },
    "tgApiHash": {
      "type": "string"
    },
    "TGScreenshotQueue": {
      "type": "string",
      "defaultValue": "ScreenshotQueue"
    },
    "TGScreenshotErrorQueue": {
      "type": "string",
      "defaultValue": "ScreenshotErrorQueue"
    },
    "ErrorLogRecipient": {
      "type": "string"
    },
    "addProjectsecretsCreate": {
      "type": "bool",
      "defaultValue": true
    },
    "sqlConnectionString": {
      "type": "string",
      "defaultValue": ""
    },
    "jwtExpires": {
      "type": "int",
      "defaultValue": 1440
    },
    "azureQueueDefaultQueueName": {
      "type": "string",
      "defaultValue": "DefaultQueue"
    },
    "jwtAlgorithm": {
      "type": "string",
      "defaultValue": "HS256"
    }
  },
  "variables": {
    "webAppNamePrefix": "app",
    "suffix": "[format('{0}{1}', toLower(replace(trim(parameters('location')), ' ', '')), uniqueString(parameters('guidstring')))]",
    "deployObj": {
      "subscriptionId": "[parameters('subscriptionId')]",
      "location": "[parameters('location')]",
      "resourceGroupName": "[format('rg-{0}-{1}-{2}', parameters('projectName'), parameters('purpose'), variables('suffix'))]",
      "acrName": "[format('acr{0}{1}{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "storageAccountName": "[take(format('st{0}{1}', parameters('projectName'), variables('suffix')), 24)]",
      "webAppName": "[format('{0}-{1}-{2}-{3}', variables('webAppNamePrefix'), parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "webHookName": "[format('{0}{1}{2}{3}', variables('webAppNamePrefix'), parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "azuresqlserversName": "[format('sql-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "dbName": "[format('sqldb-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "textTranslationName": "[format('cog-texttranslation-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "keyVaultName": "[take(format('kv-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix')), 24)]",
      "appServicePlanName": "[format('asp-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "communicationServiceName": "[format('acs-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]",
      "emailServiceName": "[format('acs-email-{0}-{1}-{2}', parameters('projectName'), parameters('environment'), variables('suffix'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deployObj').resourceGroupName]",
      "subscriptionId": "[variables('deployObj').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceGroupName": {
            "value": "[variables('deployObj').resourceGroupName]"
          },
          "resourceGroupLocation": {
            "value": "[parameters('location')]"
          },
          "Create": {
            "value": "[parameters('rgCreate')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "12879471432159773468"
            }
          },
          "parameters": {
            "Create": {
              "type": "bool",
              "defaultValue": true
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceGroupLocation": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[parameters('Create')]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2022-09-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('resourceGroupLocation')]"
            }
          ],
          "outputs": {
            "resourceGroupLocation": {
              "type": "string",
              "value": "[if(parameters('Create'), reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), '2022-09-01', 'full').location, reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), '2022-09-01', 'full').location)]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(parameters('Create'), parameters('resourceGroupName'), parameters('resourceGroupName'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('textTranslationCreate')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deployObj').textTranslationName]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "TextTranslation"
          },
          "skuName": {
            "value": "[parameters('textTranslationskuName')]"
          },
          "name": {
            "value": "[variables('deployObj').textTranslationName]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "10408867290421167068"
            },
            "name": "CognitiveServices",
            "description": "This module deploys CognitiveServices (Microsoft.CognitiveServices/accounts) and optionally available integrations.",
            "owner": "omegavveapon"
          },
          "parameters": {
            "kind": {
              "type": "string",
              "defaultValue": "CognitiveServices",
              "allowedValues": [
                "CognitiveServices",
                "ComputerVision",
                "CustomVision.Prediction",
                "CustomVision.Training",
                "Face",
                "FormRecognizer",
                "SpeechServices",
                "LUIS",
                "QnAMaker",
                "TextAnalytics",
                "TextTranslation",
                "AnomalyDetector",
                "ContentModerator",
                "Personalizer",
                "OpenAI"
              ],
              "metadata": {
                "description": "The kind of Cognitive Service to create. See: https://learn.microsoft.com/en-us/azure/cognitive-services/create-account-bicep for available kinds."
              }
            },
            "prefix": {
              "type": "string",
              "defaultValue": "cog",
              "metadata": {
                "description": "Prefix of Resource Name. Not used if name is provided"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location into which your Azure resources should be deployed."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[take(format('{0}-{1}-{2}', parameters('prefix'), parameters('kind'), uniqueString(resourceGroup().id, parameters('location'))), 64)]",
              "minLength": 2,
              "maxLength": 64,
              "metadata": {
                "description": "The name of the Cognitive Service."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to each resource."
              }
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "A custom subdomain to reach the Cognitive Service."
              }
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "The Public Network Access setting of the Cognitive Service. When false, only requests from Private Endpoints can access it."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "A list of private endpoints to connect to the Cognitive Service."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "F0",
              "allowedValues": [
                "F0",
                "S0",
                "S1",
                "S2",
                "S3",
                "S4"
              ],
              "metadata": {
                "description": "The name of the SKU. Be aware that not all SKUs may be available for your Subscription. See: https://learn.microsoft.com/en-us/rest/api/cognitiveservices/accountmanagement/resource-skus"
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of role assignment objects that contain the \"roleDefinitionIdOrName\" and \"principalId\" to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, provide either the display name of the role definition, or its fully qualified ID in the following format: \"/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\""
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "SystemAssigned",
                "SystemAssigned, UserAssigned",
                "UserAssigned"
              ],
              "metadata": {
                "description": "The type of identity used for the Cosmos DB account. The type \"SystemAssigned, UserAssigned\" includes both an implicitly created identity and a set of user-assigned identities. The type \"None\" will remove any identities from the Cosmos DB account."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The list of user-assigned managed identities. The user identity dictionary key references will be ARM resource ids in the form: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}\""
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ],
              "metadata": {
                "description": "Specify the type of lock on Cosmos DB account resource."
              }
            },
            "apiProperties": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The api properties for special APIs. More info: https://learn.microsoft.com/en-us/azure/templates/microsoft.cognitiveservices/accounts?pivots=deployment-language-bicep#apiproperties"
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Indicates whether requests using non-AAD authentication are blocked"
              }
            },
            "dynamicThrottlingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables rate limiting autoscale feature. Requires paid subscription. https://learn.microsoft.com/en-us/azure/cognitive-services/autoscale"
              }
            },
            "encryption": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The encryption settings of the Cognitive Service."
              }
            },
            "locations": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The multiregion settings of Cognitive Services account."
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "A collection of rules governing the accessibility from specific network locations."
              }
            },
            "migrationToken": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The migration token for the Cognitive Service."
              }
            },
            "restore": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether to a soft-deleted Cognitive Service should be restored. If false, the Cognitive Service needs to be purged before another with the same name can be created."
              }
            },
            "restrictOutboundNetworkAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Set this to true for data loss prevention. Will block all outbound traffic except to allowedFqdnList. https://learn.microsoft.com/en-us/azure/cognitive-services/cognitive-services-data-loss-prevention"
              }
            },
            "allowedFqdnList": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "List of allowed FQDNs(Fully Qualified Domain Name) for egress from the Cognitive Service."
              }
            },
            "userOwnedStorage": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The user owned storage accounts for the Cognitive Service."
              }
            },
            "deployments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The deployments for Cognitive Services that support them. See: https://docs.microsoft.com/en-us/azure/templates/microsoft.cognitiveservices/accounts/deployments for available properties."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "varPrivateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[format('{0}-{1}', parameters('name'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name)]",
                  "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name')))]",
                  "groupIds": [
                    "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupId]"
                  ],
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZoneId)), createArray())]",
                  "manualApprovalEnabled": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'manualApprovalEnabled'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].manualApprovalEnabled, false())]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[toLower(parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "[parameters('identityType')]",
                "userAssignedIdentities": "[parameters('userAssignedIdentities')]"
              },
              "properties": {
                "allowedFqdnList": "[parameters('allowedFqdnList')]",
                "apiProperties": "[parameters('apiProperties')]",
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]",
                "encryption": "[if(equals(parameters('encryption'), createObject()), null(), parameters('encryption'))]",
                "locations": "[if(equals(parameters('locations'), createObject()), null(), parameters('locations'))]",
                "migrationToken": "[parameters('migrationToken')]",
                "networkAcls": "[if(equals(parameters('networkAcls'), createObject()), null(), parameters('networkAcls'))]",
                "publicNetworkAccess": "[if(parameters('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                "userOwnedStorage": "[if(equals(parameters('userOwnedStorage'), createArray()), null(), parameters('userOwnedStorage'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServiceDeployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', toLower(parameters('name')), parameters('deployments')[copyIndex()].name)]",
              "sku": "[if(contains(parameters('deployments')[copyIndex()], 'sku'), parameters('deployments')[copyIndex()].sku, createObject('name', 'Standard', 'capacity', 20))]",
              "properties": "[parameters('deployments')[copyIndex()].properties]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name')))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', toLower(parameters('name')))]",
              "name": "[format('{0}-lock', parameters('name'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name')))]"
              ]
            },
            {
              "copy": {
                "name": "cognitiveServiceRbac",
                "count": "[length(parameters('roleAssignments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-rbac-{1}', parameters('name'), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                  "cognitiveServiceName": {
                    "value": "[toLower(parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.20.4.51522",
                      "templateHash": "8581926810814449607"
                    }
                  },
                  "parameters": {
                    "description": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalIds": {
                      "type": "array"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "cognitiveServiceName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
                      "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
                      "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
                      "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
                      "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
                      "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
                      "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
                      "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
                      "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
                      "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
                      "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
                      "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                      "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                      "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                      "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                      "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                      "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                      "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                      "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                      "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                      "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                      "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                      "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
                      "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
                      "name": "[guid(parameters('cognitiveServiceName'), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionIdOrName')))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name')))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('privateEndpoints'), createArray()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-peps', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpoints": {
                    "value": "[variables('varPrivateEndpoints')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.20.4.51522",
                      "templateHash": "18056016311003016070"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "privateEndpoints": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "varPrivateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]",
                        "input": {
                          "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                          "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                          "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                          "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZones, createArray())]",
                          "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].customNetworkInterfaceName, null())]",
                          "manualApprovalEnabled": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'manualApprovalEnabled'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].manualApprovalEnabled, false())]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateEndpoint",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                        "manualPrivateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                        "subnet": {
                          "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                        },
                        "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
                      }
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroup",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "privateDnsZoneConfigs",
                            "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                            "input": {
                              "name": "[if(contains(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].name, 'default')]",
                              "properties": {
                                "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name')))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Resource Name"
              },
              "value": "[toLower(parameters('name'))]"
            },
            "id": {
              "type": "string",
              "metadata": {
                "description": "Resource Id"
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name')))]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "Endpoint"
              },
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', toLower(parameters('name'))), '2023-05-01').endpoint]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "condition": "[parameters('storageAccountCreate')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deployObj').storageAccountName]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "name": {
            "value": "[variables('deployObj').storageAccountName]"
          },
          "sku": {
            "value": "[parameters('storageAccountsku')]"
          },
          "blobContainers": {
            "value": [
              {
                "name": "[toLower(parameters('azureBlobDefaultContainer'))]",
                "properties": {
                  "publicAccess": "None"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "14407591854696997315"
            },
            "name": "Azure Storage Account",
            "description": "This Bicep module creates a Storage Account with zone-redundancy, encryption, virtual network access, and TLS version.",
            "owner": "dciborow"
          },
          "definitions": {
            "changeFeed": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool"
                },
                "retentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 146000,
                  "metadata": {
                    "description": "Indicates the duration of changeFeed retention in days. A null value indicates an infinite retention of the change feed."
                  }
                }
              },
              "metadata": {
                "description": "The blob service properties for change feed events."
              }
            },
            "deleteRetentionPolicyType": {
              "type": "object",
              "properties": {
                "allowPermanentDelete": {
                  "type": "bool",
                  "metadata": {
                    "description": "This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                  }
                },
                "days": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 365,
                  "metadata": {
                    "description": "Indicates the number of days that the deleted item should be retained."
                  }
                },
                "enabled": {
                  "type": "bool"
                }
              }
            },
            "cors": {
              "type": "object",
              "properties": {
                "corsRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "allowedHeaders": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of headers allowed to be part of the cross-origin request."
                        }
                      },
                      "allowedMethods": {
                        "type": "array",
                        "allowedValues": [
                          "DELETE",
                          "GET",
                          "HEAD",
                          "MERGE",
                          "OPTIONS",
                          "PATCH",
                          "POST",
                          "PUT"
                        ],
                        "metadata": {
                          "description": "A list of HTTP methods that are allowed to be executed by the origin."
                        }
                      },
                      "allowedOrigins": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains"
                        }
                      },
                      "exposedHeaders": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of response headers to expose to CORS clients."
                        }
                      },
                      "maxAgeInSeconds": {
                        "type": "int",
                        "metadata": {
                          "description": "The number of seconds that the client/browser should cache a preflight response."
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "description": "Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
              }
            },
            "lastAccessTimeTrackingPolicyType": {
              "type": "object",
              "properties": {
                "blobType": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "enable": {
                  "type": "bool"
                }
              },
              "metadata": {
                "description": "The blob service property to configure last access time based tracking policy."
              }
            },
            "restorePolicy": {
              "type": "object",
              "properties": {
                "days": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days."
                  }
                },
                "enabled": {
                  "type": "bool"
                }
              },
              "metadata": {
                "description": "The blob service property to configure last access time based tracking policy."
              }
            },
            "blobContainerPropertiesType": {
              "type": "object",
              "properties": {
                "defaultEncryptionScope": {
                  "type": "string",
                  "nullable": true
                },
                "denyEncryptionScopeOverride": {
                  "type": "bool",
                  "nullable": true
                },
                "publicAccess": {
                  "type": "string",
                  "allowedValues": [
                    "Blob",
                    "Container",
                    "None"
                  ],
                  "nullable": true
                }
              }
            },
            "blobContainerType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 63
                },
                "properties": {
                  "$ref": "#/definitions/blobContainerPropertiesType",
                  "nullable": true
                }
              }
            },
            "activeDirectoryPropertiesType": {
              "type": "object",
              "properties": {
                "domainGuid": {
                  "type": "string",
                  "metadata": {
                    "description": "Specifies the domain GUID."
                  }
                },
                "domainName": {
                  "type": "string",
                  "metadata": {
                    "description": "Specifies the primary domain that the AD DNS server is authoritative for."
                  }
                },
                "accountType": {
                  "type": "string",
                  "allowedValues": [
                    "Computer",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the Active Directory account type for Azure Storage."
                  }
                },
                "azureStorageSid": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the security identifier (SID) for Azure Storage."
                  }
                },
                "domainSid": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the security identifier (SID) for domain."
                  }
                },
                "forestName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the Active Directory forest to get."
                  }
                },
                "netBiosDomainName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the NetBIOS domain name."
                  }
                },
                "samAccountName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the Active Directory SAMAccountName for Azure Storage."
                  }
                }
              }
            },
            "azureFilesIdentityBasedAuthenticationType": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "bool"
                },
                "configurations": {
                  "type": "object",
                  "properties": {
                    "activeDirectoryProperties": {
                      "$ref": "#/definitions/activeDirectoryPropertiesType",
                      "nullable": true,
                      "metadata": {
                        "description": "Required if directoryServiceOptions are AD, optional if they are AADKERB."
                      }
                    },
                    "defaultSharePermission": {
                      "type": "string",
                      "allowedValues": [
                        "None",
                        "StorageFileDataSmbShareContributor",
                        "StorageFileDataSmbShareElevatedContributor",
                        "StorageFileDataSmbShareReader"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Default share permission for users using Kerberos authentication if RBAC role is not assigned."
                      }
                    },
                    "directoryServiceOptions": {
                      "type": "string",
                      "allowedValues": [
                        "AADDS",
                        "AADKERB",
                        "AD",
                        "None"
                      ],
                      "metadata": {
                        "description": "Indicates the directory service used. Note that this enum may be extended in the future."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Required when enable=true."
                  }
                }
              }
            },
            "EncryptionIdentityType": {
              "type": "object",
              "properties": {
                "federatedIdentityClientId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account."
                  }
                },
                "userAssignedIdentity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account."
                  }
                }
              }
            },
            "encryptionKeyVaultPropertiesType": {
              "type": "object",
              "properties": {
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of KeyVault key."
                  }
                },
                "keyVaultUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The Uri of KeyVault."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "The version of KeyVault key."
                  }
                }
              }
            },
            "encryptionServiceType": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool",
                  "metadata": {
                    "description": "A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled."
                  }
                },
                "keyType": {
                  "type": "string",
                  "allowedValues": [
                    "Account",
                    "Service"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Encryption key type to be used for the encryption service. \"Account\" key type implies that an account-scoped encryption key will be used. \"Service\" key type implies that a default service key is used."
                  }
                }
              }
            },
            "encryptionServicesType": {
              "type": "object",
              "properties": {
                "blob": {
                  "$ref": "#/definitions/encryptionServiceType",
                  "nullable": true,
                  "metadata": {
                    "description": "The encryption function of the blob storage service."
                  }
                },
                "file": {
                  "$ref": "#/definitions/encryptionServiceType",
                  "nullable": true,
                  "metadata": {
                    "description": "The encryption function of the file storage service."
                  }
                },
                "queue": {
                  "$ref": "#/definitions/encryptionServiceType",
                  "nullable": true,
                  "metadata": {
                    "description": "The encryption function of the queue storage service."
                  }
                },
                "table": {
                  "$ref": "#/definitions/encryptionServiceType",
                  "nullable": true,
                  "metadata": {
                    "description": "The encryption function of the table storage service."
                  }
                }
              }
            },
            "encryptionType": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "bool"
                },
                "configurations": {
                  "type": "object",
                  "properties": {
                    "identity": {
                      "$ref": "#/definitions/EncryptionIdentityType",
                      "nullable": true,
                      "metadata": {
                        "description": "The identity to be used with service-side encryption at rest."
                      }
                    },
                    "keySource": {
                      "type": "string",
                      "allowedValues": [
                        "Microsoft.Keyvault",
                        "Microsoft.Storage"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Specifies the encryption keySource (provider)."
                      }
                    },
                    "keyVaultProperties": {
                      "$ref": "#/definitions/encryptionKeyVaultPropertiesType",
                      "nullable": true,
                      "metadata": {
                        "description": "Properties provided by key vault."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest."
                      }
                    },
                    "services": {
                      "$ref": "#/definitions/encryptionServicesType",
                      "nullable": true,
                      "metadata": {
                        "description": "    List of services which enable encryption using customer-managed keys.\n    Azure only support enabling either blob and file, queue and table, or all of them.\n    "
                      }
                    }
                  },
                  "nullable": true
                }
              }
            },
            "networkAclsResourceAccessRuleType": {
              "type": "object",
              "properties": {
                "resourceAccessRuleId": {
                  "type": "string",
                  "metadata": {
                    "description": "Specifies the resource id of the resource to which the access rule applies."
                  }
                },
                "tenantId": {
                  "type": "string",
                  "metadata": {
                    "description": "Specifies the tenant id of the resource to which the access rule applies."
                  }
                }
              }
            },
            "networkAclsType": {
              "type": "object",
              "properties": {
                "bypass": {
                  "type": "string",
                  "allowedValues": [
                    "AzureServices",
                    "Logging",
                    "Metrics",
                    "None"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                  }
                },
                "defaultAction": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "metadata": {
                    "description": "Specifies whether all network access is allowed or denied when no other rules match."
                  }
                },
                "ipAllowlist": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the IP or IP range in CIDR format to be allowed to connect. Only IPV4 address is allowed."
                  }
                },
                "resourceAccessRules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/networkAclsResourceAccessRuleType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Sets the resource access rules."
                  }
                },
                "subnetIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Sets the virtual network rules."
                  }
                }
              }
            },
            "routingPreferenceType": {
              "type": "object",
              "properties": {
                "publishInternetEndpoints": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "A boolean flag which indicates whether internet routing storage endpoints are to be published."
                  }
                },
                "publishMicrosoftEndpoints": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "A boolean flag which indicates whether microsoft routing storage endpoints are to be published."
                  }
                },
                "routingChoice": {
                  "type": "string",
                  "allowedValues": [
                    "InternetRouting",
                    "MicrosoftRouting"
                  ],
                  "metadata": {
                    "description": "Routing Choice defines the kind of network routing opted by the user."
                  }
                }
              }
            },
            "accessKeyPolicyType": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "bool"
                },
                "keyExpirationPeriodInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "  Required when enable=true\n  The key expiration period in days."
                  }
                }
              }
            },
            "sasTokenPolicyType": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "bool"
                },
                "configurations": {
                  "type": "object",
                  "properties": {
                    "expirationAction": {
                      "type": "string",
                      "allowedValues": [
                        "log"
                      ]
                    },
                    "sasExpirationPeriod": {
                      "type": "string",
                      "metadata": {
                        "description": "The SAS expiration period, DD.HH:MM:SS."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Required when enable=true."
                  }
                }
              }
            },
            "privateEndpointType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "subnetId": {
                  "type": "string",
                  "metadata": {
                    "description": "The subnet that the private endpoint should be created in."
                  }
                },
                "groupId": {
                  "type": "string",
                  "metadata": {
                    "description": "The subresource name of the target Azure resource that private endpoint will connect to."
                  }
                },
                "privateDnsZoneId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The ID of the private DNS zone in which private endpoint will register its private IP address."
                  }
                },
                "isManualApproval": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "When set to true, users will need to manually approve the private endpoint connection request."
                  }
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Tags for the resource."
                  }
                }
              }
            },
            "blobServicePropertiesType": {
              "type": "object",
              "properties": {
                "changeFeed": {
                  "$ref": "#/definitions/changeFeed",
                  "nullable": true
                },
                "containerDeleteRetentionPolicy": {
                  "$ref": "#/definitions/deleteRetentionPolicyType",
                  "nullable": true
                },
                "cors": {
                  "$ref": "#/definitions/cors",
                  "nullable": true
                },
                "deleteRetentionPolicy": {
                  "$ref": "#/definitions/deleteRetentionPolicyType",
                  "nullable": true
                },
                "isVersioningEnabled": {
                  "type": "bool",
                  "nullable": true
                },
                "lastAccessTimeTrackingPolicy": {
                  "$ref": "#/definitions/lastAccessTimeTrackingPolicyType",
                  "nullable": true
                },
                "restorePolicy": {
                  "$ref": "#/definitions/restorePolicy",
                  "nullable": true
                }
              },
              "metadata": {
                "description": "The properties of a storage account’s Blob service."
              }
            },
            "managementPolicyRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true
                },
                "definition": {
                  "$ref": "#/definitions/managementPolicyRuleDefinitionType",
                  "nullable": true
                }
              }
            },
            "managementPolicyRuleDefinitionType": {
              "type": "object",
              "properties": {
                "actions": {
                  "$ref": "#/definitions/managementPolicyActionType",
                  "metadata": {
                    "description": "An object that defines the action set."
                  }
                },
                "filters": {
                  "$ref": "#/definitions/managementPolicyFilterType",
                  "metadata": {
                    "description": "An object that defines the filter set."
                  }
                }
              }
            },
            "managementPolicyFilterType": {
              "type": "object",
              "properties": {
                "blobTypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob."
                  }
                },
                "prefixMatch": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "An array of strings for prefixes to be match."
                  }
                },
                "blobIndexMatch": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/managementPolicyTagFilterType"
                  },
                  "nullable": true,
                  "maxLength": 10,
                  "metadata": {
                    "description": "An array of blob index tag based filters, there can be at most 10 tag filters"
                  }
                }
              }
            },
            "managementPolicyTagFilterType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 128,
                  "metadata": {
                    "description": "This is the filter tag name, it can have 1 - 128 characters"
                  }
                },
                "op": {
                  "type": "string",
                  "allowedValues": [
                    "="
                  ],
                  "metadata": {
                    "description": "This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported"
                  }
                },
                "value": {
                  "type": "string",
                  "maxLength": 256,
                  "metadata": {
                    "description": "This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters."
                  }
                }
              }
            },
            "managementPolicyActionType": {
              "type": "object",
              "properties": {
                "baseBlob": {
                  "$ref": "#/definitions/managementPolicyBaseBlobType",
                  "nullable": true,
                  "metadata": {
                    "description": "The management policy action for base blob."
                  }
                },
                "snapshot": {
                  "$ref": "#/definitions/managementPolicySnapShotAndVersionType",
                  "nullable": true,
                  "metadata": {
                    "description": "The management policy action for snapshot."
                  }
                },
                "version": {
                  "$ref": "#/definitions/managementPolicySnapShotAndVersionType",
                  "nullable": true,
                  "metadata": {
                    "description": "The management policy action for version."
                  }
                }
              }
            },
            "managementPolicySnapShotAndVersionType": {
              "type": "object",
              "properties": {
                "delete": {
                  "$ref": "#/definitions/managementPolicyDateAfterCreationType",
                  "nullable": true,
                  "metadata": {
                    "description": "The function to delete the blob snapshot/version."
                  }
                },
                "tierToArchive": {
                  "$ref": "#/definitions/managementPolicyDateAfterCreationType",
                  "nullable": true
                },
                "tierToCold": {
                  "$ref": "#/definitions/managementPolicyDateAfterCreationType",
                  "nullable": true
                },
                "tierToCool": {
                  "$ref": "#/definitions/managementPolicyDateAfterCreationType",
                  "nullable": true
                },
                "tierToHot": {
                  "$ref": "#/definitions/managementPolicyDateAfterCreationType",
                  "nullable": true
                }
              }
            },
            "managementPolicyDateAfterCreationType": {
              "type": "object",
              "properties": {
                "daysAfterCreationGreaterThan": {
                  "type": "int",
                  "metadata": {
                    "description": "Value indicating the age in days after creation."
                  }
                },
                "daysAfterLastTierChangeGreaterThan": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Value indicating the age in days after last blob tier change time. This property is only applicable for tierToArchive actions and requires daysAfterCreationGreaterThan to be set for snapshots and blob version based actions. The blob will be archived if both the conditions are satisfied."
                  }
                }
              }
            },
            "managementPolicyBaseBlobType": {
              "type": "object",
              "properties": {
                "enableAutoTierToHotFromCool": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan."
                  }
                },
                "delete": {
                  "$ref": "#/definitions/managementPolicyDateAfterModificationType",
                  "nullable": true
                },
                "tierToArchive": {
                  "$ref": "#/definitions/managementPolicyDateAfterModificationType",
                  "nullable": true
                },
                "tierToCold": {
                  "$ref": "#/definitions/managementPolicyDateAfterModificationType",
                  "nullable": true
                },
                "tierToCool": {
                  "$ref": "#/definitions/managementPolicyDateAfterModificationType",
                  "nullable": true
                },
                "tierToHot": {
                  "$ref": "#/definitions/managementPolicyDateAfterModificationType",
                  "nullable": true
                }
              }
            },
            "managementPolicyDateAfterModificationType": {
              "type": "object",
              "properties": {
                "daysAfterCreationGreaterThan": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Value indicating the age in days after blob creation."
                  }
                },
                "daysAfterLastAccessTimeGreaterThan": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Value indicating the age in days after last blob access. This property can only be used in conjunction with last access time tracking policy."
                  }
                },
                "daysAfterLastTierChangeGreaterThan": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Value indicating the age in days after last blob tier change time. This property is only applicable for tierToArchive actions and requires daysAfterModificationGreaterThan to be set for baseBlobs based actions. The blob will be archived if both the conditions are satisfied."
                  }
                },
                "daysAfterModificationGreaterThan": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Value indicating the age in days after last modification."
                  }
                }
              }
            },
            "objectReplicationSourcePolicyType": {
              "type": "object",
              "properties": {
                "policyId": {
                  "type": "string",
                  "metadata": {
                    "description": "The value of the policy ID returned from the matching policy of the destination account."
                  }
                },
                "destinationStorageAccountId": {
                  "type": "string",
                  "metadata": {
                    "description": "The ID of the destination storage account."
                  }
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/objectReplicationSourceRuelType"
                  }
                }
              }
            },
            "objectReplicationDestinationPolicyType": {
              "type": "object",
              "properties": {
                "sourceStorageAccountId": {
                  "type": "string",
                  "metadata": {
                    "description": "The ID of the source storage account."
                  }
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/objectReplicationDestinationRuelType"
                  }
                }
              }
            },
            "objectReplicationSourceRuelType": {
              "type": "object",
              "properties": {
                "ruleId": {
                  "type": "string",
                  "metadata": {
                    "description": "The values of the rule IDs returned from the matching policy of the destination account."
                  }
                },
                "destinationContainer": {
                  "type": "string",
                  "metadata": {
                    "description": "Destination container name."
                  }
                },
                "sourceContainer": {
                  "type": "string",
                  "metadata": {
                    "description": "Source container name."
                  }
                },
                "filters": {
                  "$ref": "#/definitions/objectReplicationRuleFilterType",
                  "nullable": true
                }
              }
            },
            "objectReplicationDestinationRuelType": {
              "type": "object",
              "properties": {
                "destinationContainer": {
                  "type": "string",
                  "metadata": {
                    "description": "Destination container name."
                  }
                },
                "sourceContainer": {
                  "type": "string",
                  "metadata": {
                    "description": "Source container name."
                  }
                },
                "filters": {
                  "$ref": "#/definitions/objectReplicationRuleFilterType",
                  "nullable": true
                }
              }
            },
            "objectReplicationRuleFilterType": {
              "type": "object",
              "properties": {
                "prefixMatch": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Filters the results to replicate only blobs whose names begin with the specified prefix.."
                  }
                },
                "minCreationTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Blobs created after the time will be replicated to the destination.\n  It must be in datetime format \"yyyy-MM-ddTHH:mm:ssZ\". Example: 2020-02-19T16:05:00Z.\n  "
                  }
                }
              }
            },
            "storageRoleAssignmentsType": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Description of role assignment."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "The role definition ID, or the name of a built-in role from the list var.builtInRoles."
                  }
                },
                "principalId": {
                  "type": "string"
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Id of the delegated managed identity resource."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true
                }
              }
            },
            "containerRoleAssignmentsArray": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Description of role assignment."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "The role definition ID, or the name of a built-in role from the list var.builtInRoles."
                  }
                },
                "principalId": {
                  "type": "string"
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Id of the delegated managed identity resource."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true
                },
                "containerName": {
                  "type": "string"
                }
              }
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Deployment Location. It defaults to the location of the resource group."
              }
            },
            "prefix": {
              "type": "string",
              "defaultValue": "st",
              "metadata": {
                "description": "Prefix of Storage Account Resource Name. This param is ignored when name is provided."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('{0}{1}', parameters('prefix'), uniqueString(resourceGroup().id, parameters('location')))]",
              "minLength": 3,
              "maxLength": 24,
              "metadata": {
                "description": "Name of Storage Account. Must be unique within Azure."
              }
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be applied to the Storage Account."
              }
            },
            "isZoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "This toggle changes the default value of the sku parameter from Standard_LRS to Standard_ZRS."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "[if(parameters('isZoneRedundant'), 'Standard_ZRS', 'Standard_LRS')]",
              "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_LRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Standard_ZRS"
              ],
              "metadata": {
                "description": "Storage Account SKU."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "BlobStorage",
                "BlockBlobStorage",
                "FileStorage",
                "Storage",
                "StorageV2"
              ],
              "metadata": {
                "description": "Storage Account Kind."
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "SystemAssigned",
                "SystemAssigned,UserAssigned",
                "UserAssigned"
              ],
              "metadata": {
                "description": "The type of identity used for the storage account. The type \"SystemAssigned, UserAssigned\" includes both an implicitly created identity and a set of user-assigned identities. The type \"None\" will remove any identities from the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": [],
              "metadata": {
                "description": "The list of user-assigned managed identities. The user identity dictionary key references will be ARM resource ids in the form: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}\""
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Cool",
                "Hot"
              ],
              "metadata": {
                "description": "The access tier of the storage account, which is used for billing.\nRequired for storage accounts where kind = BlobStorage. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.\n"
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Allow or disallow public access to all blobs or containers in the storage account."
              }
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Replication of objects between AAD tenants is allowed or not. For this property, the default interpretation is true."
              }
            },
            "allowedCopyScope": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "bool"
                },
                "scope": {
                  "type": "string",
                  "allowedValues": [
                    "AAD",
                    "PrivateLink"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Required when enable=true."
                  }
                }
              },
              "defaultValue": {
                "enable": false
              },
              "metadata": {
                "description": "Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD)."
              }
            },
            "azureFilesIdentityBasedAuthentication": {
              "$ref": "#/definitions/azureFilesIdentityBasedAuthenticationType",
              "defaultValue": {
                "enable": false
              },
              "metadata": {
                "description": "Provides the identity based authentication settings for Azure Files."
              }
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "A boolean flag which indicates whether the default authentication is OAuth or not."
              }
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "AzureDnsZone",
                "Standard"
              ],
              "metadata": {
                "description": "Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
              }
            },
            "encryption": {
              "$ref": "#/definitions/encryptionType",
              "defaultValue": {
                "enable": false
              },
              "metadata": {
                "description": "Encryption settings to be used for server-side encryption for the storage account."
              }
            },
            "enableHns": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Account HierarchicalNamespace enabled if sets to true."
              }
            },
            "enableLocalUser": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables local users feature, if set to true."
              }
            },
            "enableNfsV3": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "NFS 3.0 protocol support enabled if set to true."
              }
            },
            "enableSftp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables Secure File Transfer Protocol, if set to true."
              }
            },
            "accessKeyPolicy": {
              "$ref": "#/definitions/accessKeyPolicyType",
              "defaultValue": {
                "enable": false
              },
              "metadata": {
                "description": "Policies for the access keys of the storage account."
              }
            },
            "enablelargeFileShares": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled."
              }
            },
            "networkAcls": {
              "$ref": "#/definitions/networkAclsType",
              "defaultValue": {
                "defaultAction": "Allow"
              },
              "metadata": {
                "description": "Configuration for network access rules."
              }
            },
            "routingPreference": {
              "$ref": "#/definitions/routingPreferenceType",
              "defaultValue": {
                "routingChoice": "MicrosoftRouting"
              },
              "metadata": {
                "description": "Network routing choice for data transfer."
              }
            },
            "sasTokenPolicy": {
              "$ref": "#/definitions/sasTokenPolicyType",
              "defaultValue": {
                "enable": false
              },
              "metadata": {
                "description": "SasPolicy assigned to the storage account."
              }
            },
            "supportHttpsTrafficOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Allows https traffic only to storage service if sets to true."
              }
            },
            "enablePublicNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be Enabled or Disabled."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ],
              "metadata": {
                "description": "Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Private Endpoints that should be created for the storage account."
              }
            },
            "blobServiceProperties": {
              "$ref": "#/definitions/blobServicePropertiesType",
              "defaultValue": {},
              "metadata": {
                "description": "Properties object for a Blob service of a Storage Account."
              }
            },
            "blobContainers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/blobContainerType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Array of blob containers to be created for blobServices of Storage Account."
              }
            },
            "managementPolicyRules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/managementPolicyRuleType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Configuration for the blob inventory policy."
              }
            },
            "objectReplicationSourcePolicy": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/objectReplicationSourcePolicyType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Configure object replication on a source storage accounts.\nThis config only applies to the current storage account managed by this module.\n"
              }
            },
            "objectReplicationDestinationPolicy": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/objectReplicationDestinationPolicyType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Configure object replication on a destination storage accounts.\nThis config only applies to the current storage account managed by this module.\n"
              }
            },
            "storageRoleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/storageRoleAssignmentsType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Array of role assignment objects with Storage Account scope that contain the 'roleDefinitionIdOrName', 'principalId' and 'principalType' to define RBAC role assignments on that resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "containerRoleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/containerRoleAssignmentsArray"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Array of role assignment objects with blobServices/containers scope that contain the 'containerName', 'roleDefinitionIdOrName', 'principalId' and 'principalType' to define RBAC role assignments on that resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "managementPolicyRulesWithDefaults",
                "count": "[length(parameters('managementPolicyRules'))]",
                "input": "[union(parameters('managementPolicyRules')[copyIndex('managementPolicyRulesWithDefaults')], createObject('enabled', coalesce(tryGet(parameters('managementPolicyRules')[copyIndex('managementPolicyRulesWithDefaults')], 'enabled'), true()), 'type', 'Lifecycle'))]"
              },
              {
                "name": "varNetworkAclsIpRules",
                "count": "[length(coalesce(tryGet(parameters('networkAcls'), 'ipAllowlist'), createArray()))]",
                "input": {
                  "action": "Allow",
                  "value": "[coalesce(tryGet(parameters('networkAcls'), 'ipAllowlist'), createArray())[copyIndex('varNetworkAclsIpRules')]]"
                }
              },
              {
                "name": "varNetworkAclsVirtualNetworkRules",
                "count": "[length(coalesce(tryGet(parameters('networkAcls'), 'subnetIds'), createArray()))]",
                "input": {
                  "action": "Allow",
                  "id": "[coalesce(tryGet(parameters('networkAcls'), 'subnetIds'), createArray())[copyIndex('varNetworkAclsVirtualNetworkRules')]]"
                }
              },
              {
                "name": "objectReplicationDestinationPolicyWithName",
                "count": "[length(parameters('objectReplicationDestinationPolicy'))]",
                "input": "[union(parameters('objectReplicationDestinationPolicy')[copyIndex('objectReplicationDestinationPolicyWithName')], createObject('sourceStorageAccountName', last(split(parameters('objectReplicationDestinationPolicy')[copyIndex('objectReplicationDestinationPolicyWithName')].sourceStorageAccountId, '/'))))]"
              },
              {
                "name": "objectReplicationSourcePolicyWithName",
                "count": "[length(parameters('objectReplicationSourcePolicy'))]",
                "input": "[union(parameters('objectReplicationSourcePolicy')[copyIndex('objectReplicationSourcePolicyWithName')], createObject('destinationStorageAccountName', last(split(parameters('objectReplicationSourcePolicy')[copyIndex('objectReplicationSourcePolicyWithName')].destinationStorageAccountId, '/'))))]"
              }
            ],
            "isPremium": "[contains(parameters('sku'), 'Premium')]",
            "varNetworkAcls": {
              "bypass": "[coalesce(tryGet(parameters('networkAcls'), 'bypass'), 'AzureServices')]",
              "defaultAction": "[parameters('networkAcls').defaultAction]",
              "ipRules": "[variables('varNetworkAclsIpRules')]",
              "resourceAccessRules": "[tryGet(parameters('networkAcls'), 'resourceAccessRules')]",
              "virtualNetworkRules": "[variables('varNetworkAclsVirtualNetworkRules')]"
            },
            "builtInRoles": {
              "Owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
              "Contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
              "Avere Contributor": "4f8fab4f-1852-4a58-a46a-8eaf358af14a",
              "Avere Operator": "c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
              "Backup Contributor": "5e467623-bb1f-42f4-a55d-6e525e11384b",
              "Backup Operator": "00c29273-979b-4161-815c-10b084fb9324",
              "Backup Reader": "a795c7a0-d4a2-40c1-ae25-d81f01202912",
              "Classic Storage Account Contributor": "86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
              "Classic Storage Account Key Operator Service Role": "985d6b00-f706-48f5-a6fe-d0ca12fb668d",
              "Data Box Contributor": "add466c9-e687-43fc-8d98-dfcf8d720be5",
              "Data Box Reader": "028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
              "Data Lake Analytics Developer": "47b7735b-770e-4598-a7da-8b91488b4c88",
              "Elastic SAN Owner": "80dcbedb-47ef-405d-95bd-188a1b4ac406",
              "Elastic SAN Reader": "af6a70f8-3c9f-4105-acf1-d719e9fca4ca",
              "Elastic SAN Volume Group Owner": "a8281131-f312-4f34-8d98-ae12be9f0d23",
              "Reader and Data Access": "c12c1c16-33a1-487b-954d-41c89c60f349",
              "Storage Account Backup Contributor": "e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
              "Storage Account Contributor": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
              "Storage Account Key Operator Service Role": "81a9662b-bebf-436f-a333-f67b29880f12",
              "Storage Blob Data Contributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
              "Storage Blob Data Owner": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
              "Storage Blob Data Reader": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
              "Storage Blob Delegator": "db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
              "Storage File Data SMB Share Contributor": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
              "Storage File Data SMB Share Elevated Contributor": "a7264617-510b-434b-a828-9731dc254ea7",
              "Storage File Data SMB Share Reader": "aba4ae5f-2193-4029-9191-0cb91df5e314",
              "Storage Queue Data Contributor": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
              "Storage Queue Data Message Processor": "8a0f0c08-91a1-4084-bc3d-661d67233fed",
              "Storage Queue Data Message Sender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
              "Storage Queue Data Reader": "19e7f393-937e-4f77-808e-94535e297925",
              "Storage Table Data Contributor": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
              "Storage Table Data Reader": "76199698-9eea-4c19-bc75-cec21354c6b6"
            }
          },
          "resources": {
            "storageAccount": {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "[parameters('identityType')]",
                "userAssignedIdentities": "[if(contains(parameters('identityType'), 'UserAssigned'), toObject(parameters('userAssignedIdentities'), lambda('id', lambdaVariables('id')), lambda('id', createObject())), null())]"
              },
              "properties": "[union(createObject('accessTier', if(variables('isPremium'), 'Premium', parameters('accessTier')), 'allowBlobPublicAccess', parameters('allowBlobPublicAccess'), 'allowCrossTenantReplication', parameters('allowCrossTenantReplication'), 'allowSharedKeyAccess', parameters('allowSharedKeyAccess'), 'defaultToOAuthAuthentication', parameters('defaultToOAuthAuthentication'), 'dnsEndpointType', parameters('dnsEndpointType'), 'isHnsEnabled', parameters('enableHns'), 'isLocalUserEnabled', parameters('enableLocalUser'), 'isNfsV3Enabled', parameters('enableNfsV3'), 'isSftpEnabled', parameters('enableSftp'), 'largeFileSharesState', if(parameters('enablelargeFileShares'), 'Enabled', 'Disabled'), 'minimumTlsVersion', parameters('minimumTlsVersion'), 'networkAcls', variables('varNetworkAcls'), 'publicNetworkAccess', if(parameters('enablePublicNetworkAccess'), 'Enabled', 'Disabled'), 'routingPreference', parameters('routingPreference'), 'supportsHttpsTrafficOnly', parameters('supportHttpsTrafficOnly')), if(parameters('allowedCopyScope').enable, createObject('allowedCopyScope', parameters('allowedCopyScope').scope), createObject()), if(parameters('encryption').enable, createObject('encryption', parameters('encryption').configurations), createObject()), if(parameters('accessKeyPolicy').enable, createObject('keyPolicy', parameters('accessKeyPolicy').keyExpirationPeriodInDays), createObject()), if(parameters('sasTokenPolicy').enable, createObject('sasPolicy', parameters('sasTokenPolicy').configurations), createObject()), if(parameters('azureFilesIdentityBasedAuthentication').enable, createObject('azureFilesIdentityBasedAuthentication', parameters('azureFilesIdentityBasedAuthentication').configurations), createObject()))]"
            },
            "managementpolicy": {
              "condition": "[not(empty(variables('managementPolicyRulesWithDefaults')))]",
              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "policy": {
                  "rules": "[variables('managementPolicyRulesWithDefaults')]"
                }
              },
              "dependsOn": [
                "blobService",
                "storageAccount"
              ]
            },
            "blobService": {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": "[parameters('blobServiceProperties')]",
              "dependsOn": [
                "storageAccount"
              ]
            },
            "blobContainer": {
              "copy": {
                "name": "blobContainer",
                "count": "[length(parameters('blobContainers'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('blobContainers')[copyIndex()].name)]",
              "properties": "[coalesce(tryGet(parameters('blobContainers')[copyIndex()], 'properties'), createObject())]",
              "dependsOn": [
                "blobService"
              ]
            },
            "storageAccount_RoleAssignment": {
              "copy": {
                "name": "storageAccount_RoleAssignment",
                "count": "[length(parameters('storageRoleAssignments'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[guid(parameters('name'), parameters('storageRoleAssignments')[copyIndex()].principalId, parameters('storageRoleAssignments')[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "description": "[coalesce(tryGet(parameters('storageRoleAssignments')[copyIndex()], 'description'), '')]",
                "roleDefinitionId": "[if(contains(variables('builtInRoles'), parameters('storageRoleAssignments')[copyIndex()].roleDefinitionIdOrName), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtInRoles')[parameters('storageRoleAssignments')[copyIndex()].roleDefinitionIdOrName]), parameters('storageRoleAssignments')[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[parameters('storageRoleAssignments')[copyIndex()].principalId]",
                "principalType": "[tryGet(parameters('storageRoleAssignments')[copyIndex()], 'principalType')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_containerRoleAssignment": {
              "copy": {
                "name": "storageAccount_containerRoleAssignment",
                "count": "[length(parameters('containerRoleAssignments'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('name'), 'default', parameters('blobContainers')[indexOf(map(parameters('blobContainers'), lambda('container', lambdaVariables('container').name)), parameters('containerRoleAssignments')[copyIndex()].containerName)].name)]",
              "name": "[guid(parameters('name'), parameters('containerRoleAssignments')[copyIndex()].principalId, parameters('containerRoleAssignments')[copyIndex()].roleDefinitionIdOrName, parameters('containerRoleAssignments')[copyIndex()].containerName)]",
              "properties": {
                "description": "[coalesce(tryGet(parameters('containerRoleAssignments')[copyIndex()], 'description'), '')]",
                "roleDefinitionId": "[if(contains(variables('builtInRoles'), parameters('containerRoleAssignments')[copyIndex()].roleDefinitionIdOrName), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtInRoles')[parameters('containerRoleAssignments')[copyIndex()].roleDefinitionIdOrName]), parameters('containerRoleAssignments')[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[parameters('containerRoleAssignments')[copyIndex()].principalId]",
                "principalType": "[tryGet(parameters('containerRoleAssignments')[copyIndex()], 'principalType')]"
              },
              "dependsOn": [
                "blobContainer",
                "storageAccount"
              ]
            },
            "storageAccount_objectReplicationSourcePolicy": {
              "copy": {
                "name": "storageAccount_objectReplicationSourcePolicy",
                "count": "[length(variables('objectReplicationSourcePolicyWithName'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[join(createArray(parameters('name'), 'to', variables('objectReplicationSourcePolicyWithName')[copyIndex()].destinationStorageAccountName), '-')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "policy": {
                    "value": "[union(variables('objectReplicationSourcePolicyWithName')[copyIndex()], createObject('id', variables('objectReplicationSourcePolicyWithName')[copyIndex()].policyId, 'type', 'source', 'sourceStorageAccountId', resourceId('Microsoft.Storage/storageAccounts', parameters('name'))))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "1.10-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
                    "_generator": {
                      "name": "bicep",
                      "version": "0.20.4.51522",
                      "templateHash": "57663108792819753"
                    }
                  },
                  "definitions": {
                    "objectReplicationPolicyType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "destination",
                            "source"
                          ]
                        },
                        "destinationStorageAccountId": {
                          "type": "string",
                          "metadata": {
                            "description": "The ID of the source storage account."
                          }
                        },
                        "sourceStorageAccountId": {
                          "type": "string"
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/objectReplicationRuelType"
                          }
                        }
                      }
                    },
                    "objectReplicationRuelType": {
                      "type": "object",
                      "properties": {
                        "ruleId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "  The ID of the rule. It should be obtaineed from the object relication policy rules of the destination storage account.\n  Required if the policyType is \"source\".\n  "
                          }
                        },
                        "destinationContainer": {
                          "type": "string",
                          "metadata": {
                            "description": "Destination container name."
                          }
                        },
                        "sourceContainer": {
                          "type": "string",
                          "metadata": {
                            "description": "Source container name."
                          }
                        },
                        "filters": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string"
                    },
                    "policy": {
                      "$ref": "#/definitions/objectReplicationPolicyType"
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "storageAccount_objectReplicationPolicy": {
                      "type": "Microsoft.Storage/storageAccounts/objectReplicationPolicies",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), if(equals(parameters('policy').type, 'source'), parameters('policy').id, 'default'))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "rules",
                            "count": "[length(coalesce(tryGet(parameters('policy'), 'rules'), createArray()))]",
                            "input": {
                              "ruleId": "[if(equals(parameters('policy').type, 'source'), coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')].ruleId, null())]",
                              "sourceContainer": "[coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')].sourceContainer]",
                              "destinationContainer": "[coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')].destinationContainer]",
                              "filters": "[tryGet(coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')], 'filters')]"
                            }
                          }
                        ],
                        "sourceAccount": "[parameters('policy').sourceStorageAccountId]",
                        "destinationAccount": "[parameters('policy').destinationStorageAccountId]"
                      }
                    }
                  },
                  "outputs": {
                    "policyId": {
                      "type": "string",
                      "value": "[reference('storageAccount_objectReplicationPolicy').policyId]"
                    },
                    "ruleIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "value": "[map(reference('storageAccount_objectReplicationPolicy').rules, lambda('rule', lambdaVariables('rule').ruleId))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_objectReplicationDestinationPolicy": {
              "copy": {
                "name": "storageAccount_objectReplicationDestinationPolicy",
                "count": "[length(variables('objectReplicationDestinationPolicyWithName'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[join(createArray(variables('objectReplicationDestinationPolicyWithName')[copyIndex()].sourceStorageAccountName, 'to', parameters('name')), '-')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "policy": {
                    "value": "[union(variables('objectReplicationDestinationPolicyWithName')[copyIndex()], createObject('id', 'default', 'type', 'destination', 'destinationStorageAccountId', resourceId('Microsoft.Storage/storageAccounts', parameters('name'))))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "1.10-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
                    "_generator": {
                      "name": "bicep",
                      "version": "0.20.4.51522",
                      "templateHash": "57663108792819753"
                    }
                  },
                  "definitions": {
                    "objectReplicationPolicyType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "destination",
                            "source"
                          ]
                        },
                        "destinationStorageAccountId": {
                          "type": "string",
                          "metadata": {
                            "description": "The ID of the source storage account."
                          }
                        },
                        "sourceStorageAccountId": {
                          "type": "string"
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/objectReplicationRuelType"
                          }
                        }
                      }
                    },
                    "objectReplicationRuelType": {
                      "type": "object",
                      "properties": {
                        "ruleId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "  The ID of the rule. It should be obtaineed from the object relication policy rules of the destination storage account.\n  Required if the policyType is \"source\".\n  "
                          }
                        },
                        "destinationContainer": {
                          "type": "string",
                          "metadata": {
                            "description": "Destination container name."
                          }
                        },
                        "sourceContainer": {
                          "type": "string",
                          "metadata": {
                            "description": "Source container name."
                          }
                        },
                        "filters": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string"
                    },
                    "policy": {
                      "$ref": "#/definitions/objectReplicationPolicyType"
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "storageAccount_objectReplicationPolicy": {
                      "type": "Microsoft.Storage/storageAccounts/objectReplicationPolicies",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), if(equals(parameters('policy').type, 'source'), parameters('policy').id, 'default'))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "rules",
                            "count": "[length(coalesce(tryGet(parameters('policy'), 'rules'), createArray()))]",
                            "input": {
                              "ruleId": "[if(equals(parameters('policy').type, 'source'), coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')].ruleId, null())]",
                              "sourceContainer": "[coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')].sourceContainer]",
                              "destinationContainer": "[coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')].destinationContainer]",
                              "filters": "[tryGet(coalesce(tryGet(parameters('policy'), 'rules'), createArray())[copyIndex('rules')], 'filters')]"
                            }
                          }
                        ],
                        "sourceAccount": "[parameters('policy').sourceStorageAccountId]",
                        "destinationAccount": "[parameters('policy').destinationStorageAccountId]"
                      }
                    }
                  },
                  "outputs": {
                    "policyId": {
                      "type": "string",
                      "value": "[reference('storageAccount_objectReplicationPolicy').policyId]"
                    },
                    "ruleIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "value": "[map(reference('storageAccount_objectReplicationPolicy').rules, lambda('rule', lambdaVariables('rule').ruleId))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_privateEndpoints": {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[uniqueString(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), parameters('privateEndpoints')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "endpoint": {
                    "value": "[parameters('privateEndpoints')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "1.10-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
                    "_generator": {
                      "name": "bicep",
                      "version": "0.20.4.51522",
                      "templateHash": "6354356391494568367"
                    }
                  },
                  "parameters": {
                    "targetResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "endpoint": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "manualApprovalEnabled": "[coalesce(tryGet(parameters('endpoint'), 'isManualApproval'), false())]"
                  },
                  "resources": {
                    "privateEndpoint::privateDnsZoneGroup": {
                      "condition": "[not(equals(tryGet(parameters('endpoint'), 'privateDnsZoneId'), null()))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('endpoint').name, 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('endpoint').privateDnsZoneId]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('endpoint').name]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('endpoint'), 'tags'), createObject())]",
                      "properties": {
                        "privateLinkServiceConnections": "[if(variables('manualApprovalEnabled'), null(), createArray(createObject('name', parameters('endpoint').name, 'properties', createObject('privateLinkServiceId', parameters('targetResourceId'), 'groupIds', createArray(parameters('endpoint').groupId)))))]",
                        "manualPrivateLinkServiceConnections": "[if(variables('manualApprovalEnabled'), createArray(createObject('name', parameters('endpoint').name, 'properties', createObject('privateLinkServiceId', parameters('targetResourceId'), 'groupIds', createArray(parameters('endpoint').groupId)))), null())]",
                        "subnet": {
                          "id": "[parameters('endpoint').subnetId]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Storage Account resource"
              },
              "value": "[parameters('name')]"
            },
            "id": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Storage Account. Use this ID to reference the Storage Account in other Azure resource deployments."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "objectReplicationDestinationPolicyIdsAndRuleIds": {
              "type": "array",
              "metadata": {
                "description": "Array of Object Replication Policy IDs and Object Replication PolicyID Rules for OR Policy"
              },
              "copy": {
                "count": "[length(variables('objectReplicationDestinationPolicyWithName'))]",
                "input": {
                  "sourceStorageAccountName": "[variables('objectReplicationDestinationPolicyWithName')[copyIndex()].sourceStorageAccountName]",
                  "policyId": "[reference(format('storageAccount_objectReplicationDestinationPolicy[{0}]', copyIndex())).outputs.policyId.value]",
                  "ruleIds": "[reference(format('storageAccount_objectReplicationDestinationPolicy[{0}]', copyIndex())).outputs.ruleIds.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deployObj').azuresqlserversName]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "sqlDBName": {
            "value": "[variables('deployObj').dbName]"
          },
          "serverName": {
            "value": "[variables('deployObj').azuresqlserversName]"
          },
          "sqlAdministratorLoginPassword": {
            "value": "[parameters('sqlAdministratorLoginPassword')]"
          },
          "sqlAdministratorLogin": {
            "value": "[parameters('sqlAdministratorLogin')]"
          },
          "DbCreate": {
            "value": "[parameters('DbCreate')]"
          },
          "serverCreate": {
            "value": "[parameters('serverCreate')]"
          },
          "skuname": {
            "value": "[parameters('dbskuname')]"
          },
          "skutier": {
            "value": "[parameters('dbskutier')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "347603806809281796"
            }
          },
          "parameters": {
            "serverName": {
              "type": "string",
              "defaultValue": "[uniqueString('sql', resourceGroup().id)]",
              "metadata": {
                "description": "The name of the SQL logical server."
              }
            },
            "sqlDBName": {
              "type": "string",
              "defaultValue": "SampleDB",
              "metadata": {
                "description": "The name of the SQL Database."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "sqlAdministratorLogin": {
              "type": "string",
              "metadata": {
                "description": "The administrator username of the SQL logical server."
              }
            },
            "sqlAdministratorLoginPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The administrator password of the SQL logical server."
              }
            },
            "skuname": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "skutier": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "DbCreate": {
              "type": "bool",
              "defaultValue": true
            },
            "serverCreate": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/addfirewallRules', if(parameters('DbCreate'), parameters('serverName'), parameters('serverName')))]",
              "properties": {
                "endIpAddress": "0.0.0.0",
                "startIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[parameters('serverCreate')]",
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2022-05-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "properties": {
                "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]"
              }
            },
            {
              "condition": "[parameters('DbCreate')]",
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', if(parameters('serverCreate'), parameters('serverName'), parameters('serverName')), parameters('sqlDBName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuname')]",
                "tier": "[parameters('skutier')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "sqlServerexistingObj": {
              "type": "object",
              "value": "[if(parameters('serverCreate'), reference(resourceId('Microsoft.Sql/servers', parameters('serverName')), '2022-05-01-preview', 'full'), reference(resourceId('Microsoft.Sql/servers', parameters('serverName')), '2022-05-01-preview', 'full'))]"
            },
            "sqlDBexistingName": {
              "type": "string",
              "value": "[parameters('sqlDBName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deployObj').appServicePlanName]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "appServicePlanName": {
            "value": "[variables('deployObj').appServicePlanName]"
          },
          "skuname": {
            "value": "[parameters('appServicePlanSkuname')]"
          },
          "skutier": {
            "value": "[parameters('appServicePlanSkutier')]"
          },
          "Create": {
            "value": "[parameters('appServicePlanCreate')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "17006739530072061945"
            }
          },
          "parameters": {
            "Create": {
              "type": "bool",
              "defaultValue": true
            },
            "appServicePlanName": {
              "type": "string",
              "metadata": {
                "description": "The Name of the App Service Plan."
              }
            },
            "skuname": {
              "type": "string",
              "defaultValue": "F1",
              "allowedValues": [
                "D1",
                "F1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P1V2",
                "P2V2",
                "P3V2",
                "I1",
                "I2",
                "I3",
                "Y1"
              ],
              "metadata": {
                "description": "The Name of the Sku."
              }
            },
            "skutier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Shared",
                "Free",
                "Dedicated",
                "Basic",
                "Standard",
                "Premium",
                "PremiumV2",
                "Isolated",
                "Dynamic"
              ],
              "metadata": {
                "description": "The Tier of the Sku."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('Create')]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-12-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "linux",
              "properties": {
                "reserved": true
              },
              "sku": {
                "name": "[parameters('skuname')]",
                "tier": "[parameters('skutier')]"
              }
            }
          ],
          "outputs": {
            "appServicePlan": {
              "type": "object",
              "value": "[if(parameters('Create'), reference(resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName')), '2020-12-01', 'full'), reference(resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName')), '2020-12-01', 'full'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deployObj').acrName]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "registryName": {
            "value": "[variables('deployObj').acrName]"
          },
          "Create": {
            "value": "[parameters('containerRegistryCreate')]"
          },
          "skuName": {
            "value": "[parameters('containerRegistryskuname')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "1402872300921291411"
            }
          },
          "parameters": {
            "registryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the ACR"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "Create": {
              "type": "bool",
              "defaultValue": true
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ]
            }
          },
          "resources": [
            {
              "condition": "[parameters('Create')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-container-registry', parameters('registryName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('registryName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "adminUserEnabled": {
                    "value": true
                  },
                  "skuName": {
                    "value": "[parameters('skuName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.20.4.51522",
                      "templateHash": "15501758245983767624"
                    },
                    "name": "Container Registry",
                    "description": "This module deploys Container Registry (Microsoft.ContainerRegistry/registries) and optionally available integrations.",
                    "owner": "thomasriley"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 5,
                      "maxLength": 50,
                      "metadata": {
                        "description": "The name of the Azure Container Registry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Tags for all resource(s)."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard",
                        "Premium"
                      ],
                      "metadata": {
                        "description": "The SKU of the Azure Container Registry."
                      }
                    },
                    "adminUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle the Azure Container Registry admin user."
                      }
                    },
                    "publicNetworkAccessEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Toggle public network access to Azure Container Registry."
                      }
                    },
                    "publicAzureAccessEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "When public network access is disabled, toggle this to allow Azure services to bypass the public network access rule."
                      }
                    },
                    "networkAllowedIpRanges": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "A list of IP or IP ranges in CIDR format, that should be allowed access to Azure Container Registry."
                      }
                    },
                    "networkDefaultAction": {
                      "type": "string",
                      "defaultValue": "Deny",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "The default action to take when no network rule match is found for accessing Azure Container Registry."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Array of role assignment objects that contain the 'roleDefinitionIdOrName'(string) and 'principalIds'(array of strings) to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ],
                      "metadata": {
                        "description": "Specify the type of lock."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Define Private Endpoints that should be created for Azure Container Registry."
                      }
                    },
                    "privateEndpointsApprovalEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if Private Endpoints manual approval for Azure Container Registry should be enabled."
                      }
                    },
                    "zoneRedundancyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if Zone Redundancy should be enabled on Azure Container Registry."
                      }
                    },
                    "replicationLocations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Array of Azure Location configurations that this Azure Container Registry should replicate too."
                      }
                    },
                    "dataEndpointEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if a single data endpoint per region for serving data from Azure Container Registry should be enabled."
                      }
                    },
                    "encryptionEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if encryption should be enabled on Azure Container Registry."
                      }
                    },
                    "exportPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if export policy should be enabled on Azure Container Registry."
                      }
                    },
                    "quarantinePolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if quarantine policy should be enabled on Azure Container Registry."
                      }
                    },
                    "retentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if retention policy should be enabled on Azure Container Registry."
                      }
                    },
                    "retentionPolicyInDays": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Configure the retention policy in days for Azure Container Registry. Only effective is 'retentionPolicyEnabled' is 'true'."
                      }
                    },
                    "trustPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Toggle if trust policy should be enabled on Azure Container Registry."
                      }
                    },
                    "encryptionKeyVaultIdentity": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The client ID of the identity which will be used to access Key Vault."
                      }
                    },
                    "encryptionKeyVaultKeyIdentifier": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The Key Vault URI to access the encryption key."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "minValue": 0,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "logsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "ContainerRegistryRepositoryEvents",
                        "ContainerRegistryLoginEvents"
                      ],
                      "allowedValues": [
                        "ContainerRegistryRepositoryEvents",
                        "ContainerRegistryLoginEvents"
                      ],
                      "metadata": {
                        "description": "The name of logs that will be streamed."
                      }
                    },
                    "metricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "The name of metrics that will be streamed."
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of ACR tasks to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('metricsToEnable'))]",
                        "input": {
                          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "varNetworkAllowedIpRanges",
                        "count": "[length(parameters('networkAllowedIpRanges'))]",
                        "input": {
                          "value": "[parameters('networkAllowedIpRanges')[copyIndex('varNetworkAllowedIpRanges')]]",
                          "action": "Allow"
                        }
                      },
                      {
                        "name": "varPrivateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]",
                        "input": {
                          "name": "[format('{0}-{1}', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name, parameters('name'))]",
                          "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                          "groupIds": [
                            "registry"
                          ],
                          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                          "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZoneId)), createArray())]"
                        }
                      },
                      {
                        "name": "varReplicationLocations",
                        "count": "[length(parameters('replicationLocations'))]",
                        "input": {
                          "location": "[parameters('replicationLocations')[copyIndex('varReplicationLocations')].location]",
                          "regionEndpointEnabled": "[if(contains(parameters('replicationLocations')[copyIndex('varReplicationLocations')], 'regionEndpointEnabled'), parameters('replicationLocations')[copyIndex('varReplicationLocations')].regionEndpointEnabled, false())]",
                          "zoneRedundancy": "[if(contains(parameters('replicationLocations')[copyIndex('varReplicationLocations')], 'zoneRedundancy'), parameters('replicationLocations')[copyIndex('varReplicationLocations')].zoneRedundancy, false())]"
                        }
                      }
                    ],
                    "IS_PREMIUM_SKU": "[equals(parameters('skuName'), 'Premium')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "properties": {
                        "adminUserEnabled": "[parameters('adminUserEnabled')]",
                        "publicNetworkAccess": "[if(variables('IS_PREMIUM_SKU'), if(parameters('publicNetworkAccessEnabled'), 'Enabled', 'Disabled'), null())]",
                        "networkRuleBypassOptions": "[if(variables('IS_PREMIUM_SKU'), if(parameters('publicAzureAccessEnabled'), 'AzureServices', 'None'), null())]",
                        "networkRuleSet": "[if(variables('IS_PREMIUM_SKU'), createObject('defaultAction', parameters('networkDefaultAction'), 'ipRules', variables('varNetworkAllowedIpRanges')), null())]",
                        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                        "encryption": "[if(variables('IS_PREMIUM_SKU'), if(parameters('encryptionEnabled'), createObject('keyVaultProperties', createObject('identity', parameters('encryptionKeyVaultIdentity'), 'keyIdentifier', parameters('encryptionKeyVaultKeyIdentifier')), 'status', 'enabled'), null()), null())]",
                        "zoneRedundancy": "[if(variables('IS_PREMIUM_SKU'), if(parameters('zoneRedundancyEnabled'), 'Enabled', 'Disabled'), null())]",
                        "policies": {
                          "exportPolicy": "[if(equals(parameters('publicAzureAccessEnabled'), 'false'), createObject('status', if(parameters('exportPolicyEnabled'), 'enabled', 'disabled')), null())]",
                          "quarantinePolicy": {
                            "status": "[if(parameters('quarantinePolicyEnabled'), 'enabled', 'disabled')]"
                          },
                          "retentionPolicy": "[if(variables('IS_PREMIUM_SKU'), if(parameters('retentionPolicyEnabled'), createObject('days', parameters('retentionPolicyInDays'), 'status', 'enabled'), null()), null())]",
                          "trustPolicy": "[if(variables('IS_PREMIUM_SKU'), if(parameters('trustPolicyEnabled'), createObject('status', 'enabled', 'type', 'Notary'), null()), null())]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "replications",
                        "count": "[length(variables('varReplicationLocations'))]"
                      },
                      "condition": "[variables('IS_PREMIUM_SKU')]",
                      "type": "Microsoft.ContainerRegistry/registries/replications",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('name'), variables('varReplicationLocations')[copyIndex()].location)]",
                      "location": "[variables('varReplicationLocations')[copyIndex()].location]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "regionEndpointEnabled": "[variables('varReplicationLocations')[copyIndex()].regionEndpointEnabled]",
                        "zoneRedundancy": "[if(variables('varReplicationLocations')[copyIndex()].zoneRedundancy, 'Enabled', 'Disabled')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "containerRegistry_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-acr-rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.20.4.51522",
                              "templateHash": "11276824333704269750"
                            }
                          },
                          "parameters": {
                            "description": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "principalIds": {
                              "type": "array"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string"
                            },
                            "resourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-acr-private-endpoints', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "privateEndpoints": {
                            "value": "[variables('varPrivateEndpoints')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "manualApprovalEnabled": {
                            "value": "[parameters('privateEndpointsApprovalEnabled')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.20.4.51522",
                              "templateHash": "1569431369010361825"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "manualApprovalEnabled": {
                              "type": "bool"
                            },
                            "privateEndpoints": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "varPrivateEndpoints",
                                "count": "[length(parameters('privateEndpoints'))]",
                                "input": {
                                  "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                                  "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                                  "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                                  "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZones, createArray())]",
                                  "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].customNetworkInterfaceName, null())]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpoint",
                                "count": "[length(variables('varPrivateEndpoints'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2022-05-01",
                              "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "privateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                                "manualPrivateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                                "subnet": {
                                  "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                                },
                                "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
                              }
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroup",
                                "count": "[length(variables('varPrivateEndpoints'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2022-05-01",
                              "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "privateDnsZoneConfigs",
                                    "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                                    "input": {
                                      "name": "[if(contains(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].name, 'default')]",
                                      "properties": {
                                        "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-acr-task', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "acrName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tasks": {
                            "value": "[parameters('tasks')]"
                          },
                          "loginServer": {
                            "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01').loginServer]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.20.4.51522",
                              "templateHash": "15495887558517410579"
                            }
                          },
                          "parameters": {
                            "acrName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "loginServer": {
                              "type": "string"
                            },
                            "tasks": {
                              "type": "array",
                              "defaultValue": []
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "task",
                                "count": "[length(parameters('tasks'))]"
                              },
                              "type": "Microsoft.ContainerRegistry/registries/tasks",
                              "apiVersion": "2019-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('acrName'), parameters('tasks')[copyIndex()].taskName)]",
                              "location": "[parameters('location')]",
                              "identity": "[parameters('tasks')[copyIndex()].identity]",
                              "properties": {
                                "status": "[parameters('tasks')[copyIndex()].status]",
                                "platform": "[parameters('tasks')[copyIndex()].platform]",
                                "agentConfiguration": "[parameters('tasks')[copyIndex()].agentConfiguration]",
                                "trigger": "[parameters('tasks')[copyIndex()].trigger]",
                                "step": "[parameters('tasks')[copyIndex()].step]",
                                "credentials": {
                                  "customRegistries": {
                                    "[format('{0}', parameters('loginServer'))]": "[if(equals(parameters('tasks')[copyIndex()].identity.type, 'SystemAssigned'), createObject('identity', '[system]'), createObject())]"
                                  }
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "containerRegistry_rbac",
                                "count": "[length(parameters('tasks'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-acr-task-rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": {
                                    "value": "[format('role assignment for task {0}', parameters('tasks')[copyIndex()].taskName)]"
                                  },
                                  "roleDefinitionIdOrName": {
                                    "value": "Contributor"
                                  },
                                  "principalIds": {
                                    "value": [
                                      "[reference(resourceId('Microsoft.ContainerRegistry/registries/tasks', parameters('acrName'), parameters('tasks')[copyIndex()].taskName), '2019-06-01-preview', 'full').identity.principalId]"
                                    ]
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.20.4.51522",
                                      "templateHash": "11276824333704269750"
                                    }
                                  },
                                  "parameters": {
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "principalIds": {
                                      "type": "array"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string"
                                    },
                                    "resourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                      "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                      "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                      "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ContainerRegistry/registries/tasks', parameters('acrName'), parameters('tasks')[copyIndex()].taskName)]"
                              ]
                            }
                          ],
                          "outputs": {
                            "tasksRoleAssignments": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('tasks'))]",
                                "input": {
                                  "description": "[format('role assignment for task {0}', parameters('tasks')[copyIndex()].taskName)]",
                                  "roleDefinitionIdOrName": "Contributor",
                                  "principalType": "ServicePrincipal",
                                  "principalIds": "[reference(resourceId('Microsoft.ContainerRegistry/registries/tasks', parameters('acrName'), parameters('tasks')[copyIndex()].taskName), '2019-06-01-preview', 'full').identity.principalId]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the Azure Container Registry was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure Container Registry."
                      },
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Container Registry."
                      },
                      "value": "[parameters('name')]"
                    },
                    "loginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "The login server URL of the Azure Container Registry."
                      },
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01').loginServer]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "containerRegistryObj": {
              "type": "object",
              "value": "[if(parameters('Create'), createObject('name', reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', parameters('registryName'))), '2022-09-01').outputs.name.value, 'resourceId', reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', parameters('registryName'))), '2022-09-01').outputs.resourceId.value, 'loginServer', reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-registry', parameters('registryName'))), '2022-09-01').outputs.loginServer.value), createObject('name', parameters('registryName'), 'resourceId', resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), 'loginServer', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').loginServer))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-webapp', variables('deployObj').webAppName)]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "webAppName": {
            "value": "[variables('deployObj').webAppName]"
          },
          "registryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').acrName), '2022-09-01').outputs.containerRegistryObj.value.name]"
          },
          "appServicePlanName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').appServicePlanName), '2022-09-01').outputs.appServicePlan.value.properties.name]"
          },
          "imageName": {
            "value": "[parameters('projectName')]"
          },
          "imageTag": {
            "value": "[parameters('environment')]"
          },
          "alwaysOn": {
            "value": false
          },
          "Create": {
            "value": "[parameters('webAppCreate')]"
          },
          "webHookName": {
            "value": "[variables('deployObj').webHookName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "17886202682388980239"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "appServicePlanName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service Plan."
              }
            },
            "registryName": {
              "type": "string"
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The Name of the Image."
              }
            },
            "imageTag": {
              "type": "string",
              "defaultValue": "latest",
              "metadata": {
                "description": "The Tag of the Image."
              }
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Web."
              }
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": false
            },
            "Create": {
              "type": "bool",
              "defaultValue": true
            },
            "webHookName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[parameters('Create')]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[parameters('webAppName')]",
              "kind": "app,linux,container",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "siteConfig": {
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "linuxFxVersion": "[format('DOCKER|{0}/{1}:{2}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2021-09-01').loginServer, parameters('imageName'), parameters('imageTag'))]",
                  "appSettings": [
                    {
                      "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                      "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2021-09-01').passwords[0].value]"
                    },
                    {
                      "name": "DOCKER_REGISTRY_SERVER_URL",
                      "value": "[format('{0}.azurecr.io', parameters('registryName'))]"
                    },
                    {
                      "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                      "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2021-09-01').username]"
                    },
                    {
                      "name": "DOCKER_ENABLE_CI",
                      "value": "true"
                    }
                  ]
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                "keyVaultReferenceIdentity": "SystemAssigned"
              }
            },
            {
              "condition": "[parameters('Create')]",
              "type": "Microsoft.ContainerRegistry/registries/webhooks",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('registryName'), parameters('webHookName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "status": "enabled",
                "scope": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]",
                "actions": [
                  "push"
                ],
                "serviceUri": "[list(resourceId('Microsoft.Web/sites/config', split(format('{0}/publishingcredentials', if(not(parameters('Create')), parameters('webAppName'), parameters('webAppName'))), '/')[0], split(format('{0}/publishingcredentials', if(not(parameters('Create')), parameters('webAppName'), parameters('webAppName'))), '/')[1]), '2022-03-01').properties.scmUri]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            }
          ],
          "outputs": {
            "webAppobject": {
              "type": "object",
              "value": "[if(parameters('Create'), reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2022-09-01', 'full'), reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2022-09-01', 'full'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').appServicePlanName)]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').acrName)]",
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-keyVault', variables('deployObj').keyVaultName)]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('deployObj').keyVaultName]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "roleAssignments": {
            "value": [
              "4633458b-17de-408a-b874-0445c86b69e6"
            ]
          },
          "keyVaultCreate": {
            "value": "[parameters('keyVaultCreate')]"
          },
          "rbacPolicies": {
            "value": [
              {
                "objectId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-webapp', variables('deployObj').webAppName)), '2022-09-01').outputs.webAppobject.value.identity.principalId]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "6450424381801673786"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "roleAssignments": {
              "type": "array"
            },
            "rbacPolicies": {
              "type": "array"
            },
            "keyVaultCreate": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "condition": "[parameters('keyVaultCreate')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-keyVault-key', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "rbacPolicies": {
                    "value": "[parameters('rbacPolicies')]"
                  },
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "14128626543611234857"
                    },
                    "name": "Azure Key Vault",
                    "description": "Bicep module for simplified deployment of KeyVault; enables VNet integration and offers flexible configuration options.",
                    "owner": "dciborow"
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Deployment Location"
                      }
                    },
                    "prefix": {
                      "type": "string",
                      "defaultValue": "kv",
                      "metadata": {
                        "description": "Prefix of Azure Key Vault Resource Name"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[take(format('{0}-{1}', parameters('prefix'), uniqueString(resourceGroup().id)), 24)]",
                      "maxLength": 24,
                      "minLength": 3,
                      "metadata": {
                        "description": "Name of the Key Vault"
                      }
                    },
                    "tenantId": {
                      "type": "string",
                      "defaultValue": "[subscription().tenantId]",
                      "metadata": {
                        "description": "The tenant ID where the Key Vault is deployed"
                      }
                    },
                    "enableVNet": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Deploy Key Vault into existing Virtual Network. Enabling this setting also requires subnetID"
                      }
                    },
                    "subnetID": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet ID for the Key Vault"
                      }
                    },
                    "rbacPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "List of RBAC policies to assign to the Key Vault"
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [
                        "4633458b-17de-408a-b874-0445c86b69e6",
                        "a4417e6f-fecd-4de8-b567-7b0420556985"
                      ],
                      "metadata": {
                        "description": "RBAC Role Assignments to apply to each RBAC policy"
                      }
                    },
                    "newOrExisting": {
                      "type": "string",
                      "defaultValue": "new",
                      "metadata": {
                        "description": "Whether to create a new Key Vault or use an existing one."
                      },
                      "allowedValues": [
                        "new",
                        "existing"
                      ]
                    },
                    "secretName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of Secret to add to Key Vault. Required when provided a secretValue."
                      }
                    },
                    "secretValue": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Value of Secret to add to Key Vault. The secretName parameter must also be provided when adding a secret."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies whether soft delete should be enabled for the Key Vault."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "metadata": {
                        "description": "The number of days to retain deleted data in the Key Vault."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "standard",
                      "metadata": {
                        "description": "The SKU name of the Key Vault."
                      },
                      "allowedValues": [
                        "standard",
                        "premium"
                      ]
                    },
                    "skuFamily": {
                      "type": "string",
                      "defaultValue": "A",
                      "metadata": {
                        "description": "The SKU family of the Key Vault."
                      },
                      "allowedValues": [
                        "A",
                        "B"
                      ]
                    }
                  },
                  "variables": {
                    "createSecret": "[not(equals(parameters('secretValue'), ''))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[guid(parameters('name'), 'deploy')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "newOrExisting": {
                            "value": "[parameters('newOrExisting')]"
                          },
                          "enableSoftDelete": {
                            "value": "[parameters('enableSoftDelete')]"
                          },
                          "softDeleteRetentionInDays": {
                            "value": "[parameters('softDeleteRetentionInDays')]"
                          },
                          "skuFamily": {
                            "value": "[parameters('skuFamily')]"
                          },
                          "skuName": {
                            "value": "[parameters('skuName')]"
                          },
                          "tenantId": {
                            "value": "[parameters('tenantId')]"
                          },
                          "subnetID": {
                            "value": "[parameters('subnetID')]"
                          },
                          "enableVNet": {
                            "value": "[parameters('enableVNet')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.19.5.34762",
                              "templateHash": "3207553921553376630"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Deployment Location"
                              }
                            },
                            "prefix": {
                              "type": "string",
                              "defaultValue": "kv",
                              "metadata": {
                                "description": "Prefix of Cosmos DB Resource Name"
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[take(format('{0}-{1}', parameters('prefix'), uniqueString(resourceGroup().id)), 24)]",
                              "metadata": {
                                "description": "Name of the Key Vault"
                              }
                            },
                            "newOrExisting": {
                              "type": "string",
                              "defaultValue": "new",
                              "metadata": {
                                "description": "Whether to create a new Key Vault or use an existing one"
                              },
                              "allowedValues": [
                                "new",
                                "existing"
                              ]
                            },
                            "enableVNet": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Enable VNet Service Endpoints for Key Vault"
                              }
                            },
                            "subnetID": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Subnet ID for the Key Vault"
                              }
                            },
                            "tenantId": {
                              "type": "string",
                              "defaultValue": "[subscription().tenantId]",
                              "metadata": {
                                "description": "The tenant ID where the Key Vault is deployed"
                              }
                            },
                            "enableSoftDelete": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies whether soft delete should be enabled for the Key Vault."
                              }
                            },
                            "softDeleteRetentionInDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "The number of days to retain deleted data in the Key Vault."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "standard",
                              "metadata": {
                                "description": "The SKU name of the Key Vault."
                              },
                              "allowedValues": [
                                "standard",
                                "premium"
                              ]
                            },
                            "skuFamily": {
                              "type": "string",
                              "defaultValue": "A",
                              "metadata": {
                                "description": "The SKU family of the Key Vault."
                              },
                              "allowedValues": [
                                "A",
                                "B"
                              ]
                            },
                            "enableRbacAuthorization": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies whether RBAC authorization should be enabled for the Key Vault."
                              }
                            }
                          },
                          "variables": {
                            "networkAcls": "[if(parameters('enableVNet'), createObject('defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('action', 'Allow', 'id', parameters('subnetID')))), createObject())]"
                          },
                          "resources": [
                            {
                              "condition": "[equals(parameters('newOrExisting'), 'new')]",
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                                "sku": {
                                  "family": "[parameters('skuFamily')]",
                                  "name": "[parameters('skuName')]"
                                },
                                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                                "tenantId": "[parameters('tenantId')]",
                                "networkAcls": "[variables('networkAcls')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Key Vault Id"
                              },
                              "value": "[if(equals(parameters('newOrExisting'), 'new'), resourceId('Microsoft.KeyVault/vaults', parameters('name')), resourceId('Microsoft.KeyVault/vaults', parameters('name')))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Key Vault Name"
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "rbacRoleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[guid(parameters('name'), parameters('roleAssignments')[copyIndex()])]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'deploy')), '2022-09-01').outputs.name.value]"
                          },
                          "rbacPolicies": {
                            "value": "[parameters('rbacPolicies')]"
                          },
                          "rbacRole": {
                            "value": "[parameters('roleAssignments')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.19.5.34762",
                              "templateHash": "13737839350774774675"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "rbacPolicies": {
                              "type": "array"
                            },
                            "rbacRole": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "rbac_certs_reader",
                                "count": "[length(parameters('rbacPolicies'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[guid(parameters('rbacRole'), parameters('rbacPolicies')[copyIndex()].objectId)]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRole'))]",
                                "principalId": "[parameters('rbacPolicies')[copyIndex()].objectId]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'deploy'))]"
                      ]
                    },
                    {
                      "condition": "[variables('createSecret')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[guid(parameters('name'), 'secrets')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'deploy')), '2022-09-01').outputs.name.value]"
                          },
                          "secretName": {
                            "value": "[parameters('secretName')]"
                          },
                          "secretValue": {
                            "value": "[parameters('secretValue')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.19.5.34762",
                              "templateHash": "514858800947195894"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Specifies the name of the key vault."
                              }
                            },
                            "secretName": {
                              "type": "string"
                            },
                            "secretValue": {
                              "type": "securestring"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2022-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
                              "properties": {
                                "value": "[parameters('secretValue')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Key Vault Id"
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Key Vault Name"
                              },
                              "value": "[parameters('secretName')]"
                            },
                            "secretUri": {
                              "type": "string",
                              "metadata": {
                                "description": "Secret URI"
                              },
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2022-11-01').secretUri]"
                            },
                            "secretUriWithVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Secret URI with version"
                              },
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2022-11-01').secretUriWithVersion]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'deploy'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Id"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'deploy')), '2022-09-01').outputs.id.value]"
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "minLength": 3,
                      "metadata": {
                        "description": "Key Vault Name"
                      },
                      "value": "[parameters('name')]"
                    },
                    "secretId": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Seceret Id"
                      },
                      "value": "[if(variables('createSecret'), reference(resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'secrets')), '2022-09-01').outputs.id.value, '')]"
                    },
                    "secretName": {
                      "type": "string",
                      "metadata": {
                        "description": "Key Vault Secert Name"
                      },
                      "value": "[parameters('secretName')]"
                    },
                    "secretUri": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret URI"
                      },
                      "value": "[if(variables('createSecret'), reference(resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'secrets')), '2022-09-01').outputs.secretUri.value, '')]"
                    },
                    "secretUriWithVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret URI with version"
                      },
                      "value": "[if(variables('createSecret'), reference(resourceId('Microsoft.Resources/deployments', guid(parameters('name'), 'secrets')), '2022-09-01').outputs.secretUriWithVersion.value, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[if(parameters('keyVaultCreate'), reference(resourceId('Microsoft.Resources/deployments', format('{0}-keyVault-key', parameters('name'))), '2022-09-01').outputs.name.value, parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-webapp', variables('deployObj').webAppName))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-addEmailSevice', variables('deployObj').communicationServiceName)]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName), '2022-09-01').outputs.resourceGroupLocation.value]"
          },
          "dataLocation": {
            "value": "[parameters('emailDataLocation')]"
          },
          "communicationServiceName": {
            "value": "[variables('deployObj').communicationServiceName]"
          },
          "emailServiceName": {
            "value": "[variables('deployObj').emailServiceName]"
          },
          "domainManagement": {
            "value": "[parameters('domainManagement')]"
          },
          "userEngagementTracking": {
            "value": "[parameters('userEngagementTracking')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "username": {
            "value": "[parameters('username')]"
          },
          "displayName": {
            "value": "[parameters('displayName')]"
          },
          "emailServiceCreate": {
            "value": "[parameters('emailServiceCreate')]"
          },
          "communicationServiceCreate": {
            "value": "[parameters('communicationServiceCreate')]"
          },
          "emaildomainCreate": {
            "value": "[parameters('emaildomainCreate')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "16749168562407297051"
            }
          },
          "parameters": {
            "dataLocation": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "emailServiceName": {
              "type": "string"
            },
            "communicationServiceName": {
              "type": "string"
            },
            "emailServiceCreate": {
              "type": "bool"
            },
            "emaildomainCreate": {
              "type": "bool"
            },
            "communicationServiceCreate": {
              "type": "bool"
            },
            "userEngagementTracking": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ]
            },
            "domainManagement": {
              "type": "string",
              "defaultValue": "AzureManaged",
              "allowedValues": [
                "AzureManaged",
                "CustomerManaged",
                "CustomerManagedInExchangeOnline"
              ]
            },
            "customDomain": {
              "type": "string",
              "defaultValue": "pentenrieder.dev",
              "minLength": 1,
              "maxLength": 253
            },
            "username": {
              "type": "string",
              "defaultValue": "DoNotReply"
            },
            "displayName": {
              "type": "string",
              "defaultValue": "DoNotReply"
            }
          },
          "variables": {
            "linkedDomains": "[if(not(parameters('emaildomainCreate')), createArray(), createArray(resourceId('Microsoft.Communication/emailServices/domains', if(parameters('emailServiceCreate'), parameters('emailServiceName'), parameters('emailServiceName')), if(equals(parameters('domainManagement'), 'AzureManaged'), 'AzureManagedDomain', parameters('customDomain')))))]"
          },
          "resources": [
            {
              "condition": "[parameters('emailServiceCreate')]",
              "type": "Microsoft.Communication/emailServices",
              "apiVersion": "2023-04-01-preview",
              "name": "[parameters('emailServiceName')]",
              "location": "Global",
              "properties": {
                "dataLocation": "[parameters('dataLocation')]"
              }
            },
            {
              "condition": "[parameters('emaildomainCreate')]",
              "type": "Microsoft.Communication/emailServices/domains",
              "apiVersion": "2023-04-01-preview",
              "name": "[format('{0}/{1}', if(parameters('emailServiceCreate'), parameters('emailServiceName'), parameters('emailServiceName')), if(equals(parameters('domainManagement'), 'AzureManaged'), 'AzureManagedDomain', parameters('customDomain')))]",
              "location": "Global",
              "properties": {
                "domainManagement": "[parameters('domainManagement')]",
                "userEngagementTracking": "[parameters('userEngagementTracking')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Communication/emailServices', parameters('emailServiceName'))]"
              ]
            },
            {
              "condition": "[parameters('emaildomainCreate')]",
              "type": "Microsoft.Communication/emailServices/domains/senderUsernames",
              "apiVersion": "2023-03-31",
              "name": "[format('{0}/{1}/{2}', if(parameters('emailServiceCreate'), parameters('emailServiceName'), parameters('emailServiceName')), if(equals(parameters('domainManagement'), 'AzureManaged'), 'AzureManagedDomain', parameters('customDomain')), 'donotreply')]",
              "properties": {
                "username": "[parameters('username')]",
                "displayName": "[parameters('displayName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Communication/emailServices/domains', if(parameters('emailServiceCreate'), parameters('emailServiceName'), parameters('emailServiceName')), if(equals(parameters('domainManagement'), 'AzureManaged'), 'AzureManagedDomain', parameters('customDomain')))]"
              ]
            },
            {
              "condition": "[parameters('communicationServiceCreate')]",
              "type": "Microsoft.Communication/communicationServices",
              "apiVersion": "2023-04-01",
              "name": "[parameters('communicationServiceName')]",
              "location": "Global",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "dataLocation": "[parameters('dataLocation')]",
                "linkedDomains": "[variables('linkedDomains')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Communication/emailServices/domains', if(parameters('emailServiceCreate'), parameters('emailServiceName'), parameters('emailServiceName')), if(equals(parameters('domainManagement'), 'AzureManaged'), 'AzureManagedDomain', parameters('customDomain')))]"
              ]
            }
          ],
          "outputs": {
            "fromSenderDomain": {
              "type": "string",
              "value": "[if(parameters('emaildomainCreate'), reference(resourceId('Microsoft.Communication/emailServices/domains', if(parameters('emailServiceCreate'), parameters('emailServiceName'), parameters('emailServiceName')), if(equals(parameters('domainManagement'), 'AzureManaged'), 'AzureManagedDomain', parameters('customDomain'))), '2023-04-01-preview').mailFromSenderDomain, '')]"
            },
            "communicationServiceName": {
              "type": "string",
              "value": "[if(parameters('communicationServiceCreate'), parameters('communicationServiceName'), parameters('communicationServiceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(variables('deployObj').subscriptionId, 'Microsoft.Resources/deployments', variables('deployObj').resourceGroupName)]"
      ]
    },
    {
      "condition": "[parameters('addProjectsecretsCreate')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-addprojectsecrets', variables('deployObj').keyVaultName)]",
      "resourceGroup": "[variables('deployObj').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "TGScreenshotQueue": {
            "value": "[parameters('TGScreenshotQueue')]"
          },
          "TGScreenshotErrorQueue": {
            "value": "[parameters('TGScreenshotErrorQueue')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-keyVault', variables('deployObj').keyVaultName)), '2022-09-01').outputs.keyVaultName.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').storageAccountName), '2022-09-01').outputs.name.value]"
          },
          "dbname": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').azuresqlserversName), '2022-09-01').outputs.sqlDBexistingName.value]"
          },
          "jwtSecretKey": {
            "value": "[parameters('jwtSecretKey')]"
          },
          "sqlpwd": {
            "value": "[parameters('sqlAdministratorLoginPassword')]"
          },
          "sqlurl": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').azuresqlserversName), '2022-09-01').outputs.sqlServerexistingObj.value.properties.fullyQualifiedDomainName]"
          },
          "sqluser": {
            "value": "[parameters('sqlAdministratorLogin')]"
          },
          "tgApiHash": {
            "value": "[parameters('tgApiHash')]"
          },
          "tgappid": {
            "value": "[parameters('tgappid')]"
          },
          "tgphone": {
            "value": "[parameters('tgphone')]"
          },
          "weburi": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-webapp', variables('deployObj').webAppName)), '2022-09-01').outputs.webAppobject.value.properties.defaultHostName]"
          },
          "TranslationName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').textTranslationName), '2022-09-01').outputs.name.value]"
          },
          "ErrorLogRecipient": {
            "value": "[parameters('ErrorLogRecipient')]"
          },
          "AzureMailSender": {
            "value": "[format('{0}@{{addEmailSevice.outputs.fromSenderDomain}}', parameters('username'))]"
          },
          "communicationServiceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-addEmailSevice', variables('deployObj').communicationServiceName)), '2022-09-01').outputs.communicationServiceName.value]"
          },
          "jwtAlgorithm": {
            "value": "[parameters('jwtAlgorithm')]"
          },
          "AzureBlobDefaultContainer": {
            "value": "[parameters('azureBlobDefaultContainer')]"
          },
          "AzureQueueDefaultQueueName": {
            "value": "[parameters('azureQueueDefaultQueueName')]"
          },
          "jwtExpires": {
            "value": "[parameters('jwtExpires')]"
          },
          "sqlConnectionString": {
            "value": "[parameters('sqlConnectionString')]"
          },
          "webappName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-webapp', variables('deployObj').webAppName)), '2022-09-01').outputs.webAppobject.value.properties.name]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "14801086986549407008"
            }
          },
          "parameters": {
            "sqlpwd": {
              "type": "securestring"
            },
            "dbname": {
              "type": "string"
            },
            "sqlurl": {
              "type": "string"
            },
            "sqluser": {
              "type": "string"
            },
            "sqlConnectionString": {
              "type": "string",
              "defaultValue": ""
            },
            "weburi": {
              "type": "string"
            },
            "jwtSecretKey": {
              "type": "securestring"
            },
            "jwtAlgorithm": {
              "type": "string",
              "defaultValue": "HS256"
            },
            "jwtExpires": {
              "type": "int",
              "defaultValue": 1440
            },
            "tgphone": {
              "type": "string"
            },
            "tgappid": {
              "type": "string"
            },
            "tgApiHash": {
              "type": "string"
            },
            "AzureQueueDefaultQueueName": {
              "type": "string",
              "defaultValue": "DefaultQueue"
            },
            "AzureBlobDefaultContainer": {
              "type": "string",
              "defaultValue": "DefaultContainer"
            },
            "AzureMailSender": {
              "type": "string"
            },
            "TGScreenshotQueue": {
              "type": "string",
              "defaultValue": "ScreenshotQueue"
            },
            "TGScreenshotErrorQueue": {
              "type": "string",
              "defaultValue": "ScreenshotErrorQueue"
            },
            "ErrorLogRecipient": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "TranslationName": {
              "type": "string"
            },
            "communicationServiceName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "webappName": {
              "type": "string"
            }
          },
          "variables": {
            "sqlConnection": "[if(equals(parameters('sqlConnectionString'), ''), format('Server=tcp:{0},1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', parameters('sqlurl'), parameters('dbname'), parameters('sqluser'), parameters('sqlpwd')), format('{0}', parameters('sqlConnectionString')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secret', parameters('keyVaultName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "secrets": {
                    "value": [
                      {
                        "name": "Serilog",
                        "value": "[format('{{\"Serilog\":{{\"Using\":[\"Serilog.Sinks.MSSqlServer\"],\"MinimumLevel\":{{\"Default\":\"Information\",\"Override\":{{\"Microsoft.AspNetCore\":\"Warning\"}}}},\"WriteTo\":[{{\"Name\":\"Console\"}},{{\"Name\":\"File\",\"Args\":{{\"path\":\"./logs/log-.txt\",\"rollingInterval\":\"Day\",\"formatter\":\"Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact\"}}}},{{\"Name\":\"MSSqlServer\",\"Args\":{{\"connectionString\":\"{0}\",\"outputTemplate\":\"[{{Timestamp:hh:mm:ss tt}} {{Level:u3}}] {{Message:lj}} {{Properties:j}}{{NewLine}}{{Exception}}\",\"sinkOptionsSection\":{{\"tableName\":\"Logs\",\"schemaName\":\"EventLogging\",\"autoCreateSqlTable\":true,\"restrictedToMinimumLevel\":\"Information\",\"batchPostingLimit\":1000,\"period\":\"0.00:00:30\"}},\"restrictedToMinimumLevel\":\"Warning\",\"columnOptionsSection\":{{\"disableTriggers\":true,\"clusteredColumnstoreIndex\":false,\"primaryKeyColumnName\":\"Id\",\"addStandardColumns\":[],\"removeStandardColumns\":[\"MessageTemplate\",\"Properties\"],\"additionalColumns\":[{{\"ColumnName\":\"IP\",\"DataType\":\"varchar\",\"PropertyName\":\"IP\",\"AllowNull\":true}},{{\"ColumnName\":\"UserName\",\"DataType\":\"varchar\",\"PropertyName\":\"UserName\",\"AllowNull\":true}}]}},\"id\":{{\"nonClusteredIndex\":true}},\"timeStamp\":{{\"columnName\":\"CreatedTime\",\"convertToUtc\":true}},\"logEvent\":{{\"columnName\":\"LogEvent\",\"excludeAdditionalProperties\":true,\"excludeStandardColumns\":true}},\"message\":{{\"columnName\":\"message\"}},\"exception\":{{\"columnName\":\"exception\"}}}}}}]}}}}', variables('sqlConnection'))]"
                      },
                      {
                        "name": "JwtConfiguration",
                        "value": "[format('{{\"JwtConfiguration\":{{\"Issuer\":\"{0}\",\"ValidateIssuer\":true,\"Audience\":\"{1}\",\"ValidateAudience\":true,\"Expires\":{2},\"SecretKey\":\"{3}\",\"Algorithm\":\"{4}\"}}}}', parameters('weburi'), parameters('weburi'), parameters('jwtExpires'), parameters('jwtSecretKey'), parameters('jwtAlgorithm'))]"
                      },
                      {
                        "name": "DBSettings",
                        "value": "[format('{{\"DBSettings\":{{\"DBSettingList\":[{{\"IsDefault\":true,\"Name\":\"BrideWell\",\"ConnectionString\":\"{0}\"}}]}}}}', variables('sqlConnection'))]"
                      },
                      {
                        "name": "ClientConfiguration",
                        "value": "[format('{{\"ClientConfiguration\": {{\"AppId\": {0},\"ApiHash\": \"{1}\",\"DefaultPone\": \"{2}\",\"SqlConnectionString\": \"{3}\"   }} }}', parameters('tgappid'), parameters('tgApiHash'), parameters('tgphone'), variables('sqlConnection'))]"
                      },
                      {
                        "name": "AzureTranslationConfiguration",
                        "value": "[format('{{\"AzureTranslationConfiguration\":{{\"ApiKey\":\"{0}\",\"Region\":\"{1}\",\"Uri\":\"{2}\"}}}}', listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('TranslationName')), '2023-05-01').key1, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('TranslationName')), '2023-05-01', 'full').location, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('TranslationName')), '2023-05-01').endpoint)]"
                      },
                      {
                        "name": "AzureQueueConfiguration",
                        "value": "[format('{{\"AzureQueueConfiguration\": {{\"ConnectionString\": \"{0}\",\"DefaultQueueName\": \"{1}\"}}}}', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value, environment().suffixes.storage), parameters('AzureQueueDefaultQueueName'))]"
                      },
                      {
                        "name": "AzureBlobConfiguration",
                        "value": "[format('{{\"AzureBlobConfiguration\":{{\"ConnectionString\":\"{0}\",\"DefaultContainer\":\"{1}\"}}}}', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value, environment().suffixes.storage), parameters('AzureBlobDefaultContainer'))]"
                      },
                      {
                        "name": "TGScreenshotQueueConfiguration",
                        "value": "[format('{{\"TGScreenshotQueue\": {{\"DefaultQueueName\": \"{0}\",\"DefaultErroQueueName\": \"{1}\"}}}}', parameters('TGScreenshotQueue'), parameters('TGScreenshotErrorQueue'))]"
                      },
                      {
                        "name": "AzureMailConfiguration",
                        "value": "[format('{{\"AzureMailConfiguration\": {{\"ConnectionString\":\"{0}\",\"Sender\":\"{1}\",\"ErrorLogRecipient\":\"{2}\"}}}}', listKeys(resourceId('Microsoft.Communication/communicationServices', parameters('communicationServiceName')), '2023-04-01').primaryConnectionString, parameters('AzureMailSender'), parameters('ErrorLogRecipient'))]"
                      }
                    ]
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "646833130501625210"
                    }
                  },
                  "parameters": {
                    "secrets": {
                      "type": "array"
                    },
                    "keyVaultName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "addsecret",
                        "count": "[length(parameters('secrets'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), format('{0}', parameters('secrets')[copyIndex()].Name))]",
                      "properties": {
                        "value": "[parameters('secrets')[copyIndex()].Value]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "addappsetting",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "properties": {
                    "value": "[union(list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites', parameters('webappName'))), '2022-09-01').properties, createObject('AzureKeyVaultConfiguration', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-11-01').vaultUri))]"
                  },
                  "webname": {
                    "value": "[parameters('webappName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "874887167538868968"
                    }
                  },
                  "parameters": {
                    "webname": {
                      "type": "string"
                    },
                    "properties": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('webname'), 'appsettings')]",
                      "properties": "[parameters('properties')]"
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "secretsObj": {
              "type": "array",
              "value": [
                {
                  "name": "Serilog",
                  "value": "[format('{{\"Serilog\":{{\"Using\":[\"Serilog.Sinks.MSSqlServer\"],\"MinimumLevel\":{{\"Default\":\"Information\",\"Override\":{{\"Microsoft.AspNetCore\":\"Warning\"}}}},\"WriteTo\":[{{\"Name\":\"Console\"}},{{\"Name\":\"File\",\"Args\":{{\"path\":\"./logs/log-.txt\",\"rollingInterval\":\"Day\",\"formatter\":\"Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact\"}}}},{{\"Name\":\"MSSqlServer\",\"Args\":{{\"connectionString\":\"{0}\",\"outputTemplate\":\"[{{Timestamp:hh:mm:ss tt}} {{Level:u3}}] {{Message:lj}} {{Properties:j}}{{NewLine}}{{Exception}}\",\"sinkOptionsSection\":{{\"tableName\":\"Logs\",\"schemaName\":\"EventLogging\",\"autoCreateSqlTable\":true,\"restrictedToMinimumLevel\":\"Information\",\"batchPostingLimit\":1000,\"period\":\"0.00:00:30\"}},\"restrictedToMinimumLevel\":\"Warning\",\"columnOptionsSection\":{{\"disableTriggers\":true,\"clusteredColumnstoreIndex\":false,\"primaryKeyColumnName\":\"Id\",\"addStandardColumns\":[],\"removeStandardColumns\":[\"MessageTemplate\",\"Properties\"],\"additionalColumns\":[{{\"ColumnName\":\"IP\",\"DataType\":\"varchar\",\"PropertyName\":\"IP\",\"AllowNull\":true}},{{\"ColumnName\":\"UserName\",\"DataType\":\"varchar\",\"PropertyName\":\"UserName\",\"AllowNull\":true}}]}},\"id\":{{\"nonClusteredIndex\":true}},\"timeStamp\":{{\"columnName\":\"CreatedTime\",\"convertToUtc\":true}},\"logEvent\":{{\"columnName\":\"LogEvent\",\"excludeAdditionalProperties\":true,\"excludeStandardColumns\":true}},\"message\":{{\"columnName\":\"message\"}},\"exception\":{{\"columnName\":\"exception\"}}}}}}]}}}}', variables('sqlConnection'))]"
                },
                {
                  "name": "JwtConfiguration",
                  "value": "[format('{{\"JwtConfiguration\":{{\"Issuer\":\"{0}\",\"ValidateIssuer\":true,\"Audience\":\"{1}\",\"ValidateAudience\":true,\"Expires\":{2},\"SecretKey\":\"{3}\",\"Algorithm\":\"{4}\"}}}}', parameters('weburi'), parameters('weburi'), parameters('jwtExpires'), parameters('jwtSecretKey'), parameters('jwtAlgorithm'))]"
                },
                {
                  "name": "DBSettings",
                  "value": "[format('{{\"DBSettings\":{{\"DBSettingList\":[{{\"IsDefault\":true,\"Name\":\"BrideWell\",\"ConnectionString\":\"{0}\"}}]}}}}', variables('sqlConnection'))]"
                },
                {
                  "name": "ClientConfiguration",
                  "value": "[format('{{\"ClientConfiguration\": {{\"AppId\": {0},\"ApiHash\": \"{1}\",\"DefaultPone\": \"{2}\",\"SqlConnectionString\": \"{3}\"   }} }}', parameters('tgappid'), parameters('tgApiHash'), parameters('tgphone'), variables('sqlConnection'))]"
                },
                {
                  "name": "AzureTranslationConfiguration",
                  "value": "[format('{{\"AzureTranslationConfiguration\":{{\"ApiKey\":\"{0}\",\"Region\":\"{1}\",\"Uri\":\"{2}\"}}}}', listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('TranslationName')), '2023-05-01').key1, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('TranslationName')), '2023-05-01', 'full').location, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('TranslationName')), '2023-05-01').endpoint)]"
                },
                {
                  "name": "AzureQueueConfiguration",
                  "value": "[format('{{\"AzureQueueConfiguration\": {{\"ConnectionString\": \"{0}\",\"DefaultQueueName\": \"{1}\"}}}}', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value, environment().suffixes.storage), parameters('AzureQueueDefaultQueueName'))]"
                },
                {
                  "name": "AzureBlobConfiguration",
                  "value": "[format('{{\"AzureBlobConfiguration\":{{\"ConnectionString\":\"{0}\",\"DefaultContainer\":\"{1}\"}}}}', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value, environment().suffixes.storage), parameters('AzureBlobDefaultContainer'))]"
                },
                {
                  "name": "TGScreenshotQueueConfiguration",
                  "value": "[format('{{\"TGScreenshotQueue\": {{\"DefaultQueueName\": \"{0}\",\"DefaultErroQueueName\": \"{1}\"}}}}', parameters('TGScreenshotQueue'), parameters('TGScreenshotErrorQueue'))]"
                },
                {
                  "name": "AzureMailConfiguration",
                  "value": "[format('{{\"AzureMailConfiguration\": {{\"ConnectionString\":\"{0}\",\"Sender\":\"{1}\",\"ErrorLogRecipient\":\"{2}\"}}}}', listKeys(resourceId('Microsoft.Communication/communicationServices', parameters('communicationServiceName')), '2023-04-01').primaryConnectionString, parameters('AzureMailSender'), parameters('ErrorLogRecipient'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-addEmailSevice', variables('deployObj').communicationServiceName))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').azuresqlserversName)]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-keyVault', variables('deployObj').keyVaultName))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').storageAccountName)]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', variables('deployObj').textTranslationName)]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('deployObj').resourceGroupName), 'Microsoft.Resources/deployments', format('{0}-webapp', variables('deployObj').webAppName))]"
      ]
    }
  ]
}